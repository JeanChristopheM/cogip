{"mappings":"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","sources":["src/components/invoices/InvoiceAdd.jsx","src/logic/formValidation.js","src/components/reusables/CompanySelector.jsx","src/components/reusables/ContactSelector.jsx"],"sourcesContent":["import { useState, useEffect } from \"react\";\nimport handleRequests from \"../../logic/handleRequests\";\nimport { invoiceVerify } from \"../../logic/formValidation\";\n\nimport CompanySelector from \"../reusables/CompanySelector\";\nimport ContactSelector from \"../reusables/ContactSelector\";\n\n// toaster\nimport { ToastContainer, toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\n// end toaster\n\nfunction InvoiceAdd({ contacts, companies, setIsLoaded, isAuth }) {\n  const [selectedCompany, setSelectedCompany] = useState(\"\");\n  const [selectedContact, setSelectedContact] = useState(\"\");\n  const [isFetching, setIsFetching] = useState(false);\n  useEffect(() => {\n    const message = sessionStorage.getItem(\"cogipToast\");\n    if (!message) return;\n    const messageArray = message.split(\",\");\n    toast[messageArray[0]](messageArray[1], {\n      position: toast.POSITION.BOTTOM_RIGHT,\n    });\n    sessionStorage.removeItem(\"cogipToast\");\n  }, [isFetching]);\n  const handleCompanyChange = (value) => {\n    setSelectedCompany(value);\n  };\n  const handleContactChange = (value) => {\n    setSelectedContact(value);\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setIsFetching(true);\n    const contact = contacts.find(\n      (el) => `${el.firstname} ${el.lastname}` == selectedContact\n    );\n    /* Instantiate object with form data */\n    const formData = {\n      reference: e.target.reference.value,\n      amount: e.target.amount.value,\n      company: selectedCompany.id.toString(),\n      contact: contact.id.toString(),\n      received: e.target.date.value,\n      paid: e.target.paid.checked,\n    };\n    /* Data verification */\n    let check = invoiceVerify(formData);\n    /* Posting data if OK */\n    if (check.ok) {\n      const { status, message, dataPackage } = await handleRequests(\n        \"POST\",\n        \"https://csharpproject.somee.com/api/Invoice\",\n        isAuth.jwt,\n        formData\n      );\n      setIsFetching(false);\n      setIsLoaded(false);\n      if (status === 200)\n        sessionStorage.setItem(\"cogipToast\", \"success,Success !\");\n      else sessionStorage.setItem(\"cogipToast\", `error,${message}`);\n    } else {\n      setIsFetching(false);\n      /* Handling Errors */\n      const issues = Object.keys(check);\n      setTimeout(() => {\n        for (let issue of issues) {\n          if (issue !== \"ok\") {\n            toast.error(check[issue], {\n              position: toast.POSITION.BOTTOM_RIGHT,\n            });\n          }\n        }\n      }, 250);\n    }\n  };\n\n  return (\n    <main>\n      <div className=\"card\">\n        <h2>Fill up the form</h2>\n        <form className=\"invoiceForm\" onSubmit={handleSubmit}>\n          <ul>\n            <li>\n              <span>Reference : </span>\n              <input\n                type=\"text\"\n                name=\"reference\"\n                minLength=\"3\"\n                maxLength=\"45\"\n                required\n              />\n            </li>\n            <li>\n              <span>Company : </span>\n              <CompanySelector\n                companies={companies}\n                handleCompanyChange={handleCompanyChange}\n                currentCompany={{ name: \"\" }}\n              />\n            </li>\n            <li>\n              <span>Contact : </span>\n              <ContactSelector\n                contacts={contacts}\n                companies={companies}\n                selectedCompany={selectedCompany}\n                handleContactChange={handleContactChange}\n                currentContact={{ name: \"\" }}\n                name={\"company\"}\n              />\n            </li>\n            <li>\n              <span>Date of reception : </span>\n              <input type=\"date\" name=\"date\" required />\n            </li>\n            <li>\n              <span>Amount : </span>\n              <input type=\"number\" name=\"amount\" required />\n            </li>\n            <li>\n              <span>Paid status : </span>\n              <label htmlFor=\"paid\" className=\"switchToggle\">\n                <input\n                  type=\"checkbox\"\n                  name=\"paid\"\n                  id=\"paid\"\n                  className=\"switchCheck\"\n                />\n                <span className=\"slider\"></span>\n              </label>\n            </li>\n          </ul>\n          <button>Submit</button>\n        </form>\n        <ToastContainer />\n      </div>\n      {isFetching ? (\n        <div className=\"fetching dark\">\n          <div className=\"lds-dual-ring\"></div>\n        </div>\n      ) : null}\n    </main>\n  );\n}\n\nexport default InvoiceAdd;\n","const invoiceVerify = (dataToVerify) => {\n  let response = {};\n  if (!dataToVerify.reference) response.reference = \"Please enter a reference\";\n  if (!dataToVerify.company) response.company = \"Please select a company\";\n  if (!dataToVerify.amount) response.amount = \"Please enter an amount\";\n  if (!dataToVerify.contact) response.contact = \"Please select a contact\";\n  if (!dataToVerify.received) response.received = \"Please select a date\";\n  if (dataToVerify.paid !== false && dataToVerify.paid !== true)\n    response.paid = \"Please select a paid status\";\n  response.ok = Object.keys(response).length > 0 ? false : true;\n  return response;\n};\nconst contactVerify = (dataToVerify) => {\n  let response = {};\n  if (!dataToVerify.firstname) response.firstname = \"Please enter a firstname\";\n  if (!dataToVerify.lastname) response.lastname = \"Please enter a lastname\";\n  if (!dataToVerify.contactcompany)\n    response.contactcompany = \"Please select a contact\";\n  if (!dataToVerify.email) response.email = \"Please enter an email\";\n  if (!dataToVerify.phonenumber)\n    response.phonenumber = \"Please enter a phone number\";\n  response.ok = Object.keys(response).length > 0 ? false : true;\n  return response;\n};\n\nconst companyVerify = (dataToVerify) => {\n  let response = {};\n  if (!dataToVerify.name) response.name = \"Please enter a name\";\n  if (!dataToVerify.vat) response.vat = \"Please enter a vat number\";\n  if (!dataToVerify.status) response.status = \"Please select a status\";\n  response.ok = Object.keys(response).length > 0 ? false : true;\n  return response;\n};\n\nexport { invoiceVerify, contactVerify, companyVerify };\n","function CompanySelector({\n  companies,\n  handleCompanyChange,\n  currentCompany,\n  name,\n}) {\n  return (\n    <select\n      onChange={(e) => {\n        let company = companies.find((el) => el.name == e.target.value)\n          ? companies.find((el) => el.name == e.target.value)\n          : \"\";\n        handleCompanyChange(company);\n      }}\n      defaultValue={currentCompany.name}\n      name={name}\n      required\n    >\n      <option value=\"\">Select a company</option>\n      {companies.map((company) => {\n        return (\n          <option value={company.name} key={company.id}>\n            {company.name}\n          </option>\n        );\n      })}\n    </select>\n  );\n}\n\nexport default CompanySelector;\n","function ContactSelector({\n  contacts,\n  selectedCompany,\n  currentContact,\n  handleContactChange,\n}) {\n  return (\n    <select\n      onChange={(e) => {\n        handleContactChange(e.target.value);\n      }}\n      defaultValue={`${currentContact.firstname} ${currentContact.lastname}`}\n      required\n    >\n      <option value=\"\">\n        {selectedCompany == \"\" ? \"Select a company first\" : \"Select a contact\"}\n      </option>\n      {contacts.map((contact) => {\n        if (selectedCompany == \"\") {\n          return;\n        } else if (selectedCompany.id == contact.contactcompany) {\n          return (\n            <option\n              value={`${contact.firstname} ${contact.lastname}`}\n              key={contact.id}\n            >\n              {`${contact.firstname} ${contact.lastname}`}\n            </option>\n          );\n        }\n      })}\n    </select>\n  );\n}\n\nexport default ContactSelector;\n"],"names":["$d356230963735a75$export$2e2bcd8739ae039","contacts","companies","setIsLoaded","isAuth","selectedCompany","setSelectedCompany","$eCRxs","useState","selectedContact","setSelectedContact","isFetching","setIsFetching","useEffect","message","sessionStorage","getItem","messageArray","split","$dv2Dk","toast","position","POSITION","BOTTOM_RIGHT","removeItem","$7C6UD","jsxs","className","onSubmit","async","e","preventDefault","contact","find","el","firstname","lastname","formData","reference","target","value","amount","company","id","toString","received","date","paid","checked","check","$5H5kc","invoiceVerify","ok","status","dataPackage","$9aCo1","default","jwt","setItem","issues","Object","keys","setTimeout","issue","error","type","name","minLength","maxLength","required","$4yknE","handleCompanyChange","currentCompany","$eltSV","handleContactChange","currentContact","htmlFor","ToastContainer","jsx","$42551951195d288c$export$7e6a64f84fea9213","dataToVerify","response","length","$42551951195d288c$export$9204046200024146","contactcompany","email","phonenumber","$42551951195d288c$export$927967c6383eee08","vat","$27c888b5041dae3c$export$2e2bcd8739ae039","onChange","defaultValue","map","$584feee2975545c7$export$2e2bcd8739ae039"],"version":3,"file":"InvoiceAdd.c65ecb76.js.map"}