{"mappings":"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","sources":["src/components/companies/Companies.jsx","src/logic/dateFormatter.js"],"sourcesContent":["import { useMemo, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useTable, useSortBy, useFilters } from \"react-table\";\nimport SelectFilter from \"../reusables/SelectFilter\";\nimport { dateFormatter } from \"../../logic/dateFormatter\";\nimport { ToastContainer, toast } from \"react-toastify\";\n\nfunction Companies({ companies }) {\n  useEffect(() => {\n    const message = sessionStorage.getItem(\"cogipToast\");\n    if (!message) return;\n    toast.success(message, {\n      position: toast.POSITION.BOTTOM_RIGHT,\n    });\n    sessionStorage.removeItem(\"cogipToast\");\n  }, []);\n  const navigate = useNavigate();\n  const handleAdd = (e) => {\n    navigate(`/${e.target.id}`);\n  };\n\n  /* SETTING UP TABLE */\n  const data = useMemo(() => {\n    let results = [];\n    for (let company of companies) {\n      let obj = {\n        icon:\n          company.status == \"Supplier\" ? (\n            <i className=\"fas fa-parachute-box\"></i>\n          ) : (\n            <i className=\"fas fa-shopping-basket\"></i>\n          ),\n        col1: company.name,\n        col2: company.status,\n        col3: company.vat,\n        col4: dateFormatter(company.added),\n        col5: company.country,\n        col6: company.zip.toString(),\n        id: company.id,\n      };\n      results.push(obj);\n    }\n    return results;\n  }, [companies]);\n  const columns = useMemo(\n    () => [\n      {\n        Header: \"\",\n        accessor: \"icon\",\n        className: \"companyIcon\",\n        disableSortBy: true,\n        disableFilters: true,\n      },\n      {\n        Header: \"Name\",\n        accessor: \"col1\",\n        className: \"companyName\",\n        disableFilters: true,\n      },\n      {\n        Header: \"Status\",\n        accessor: \"col2\",\n        className: \"companyType\",\n        Filter: SelectFilter,\n        filter: \"includes\",\n      },\n      {\n        Header: \"VAT\",\n        accessor: \"col3\",\n        className: \"companyVat\",\n        disableFilters: true,\n      },\n      {\n        Header: \"Added\",\n        accessor: \"col4\",\n        className: \"companyAdded\",\n        disableFilters: true,\n      },\n      {\n        Header: \"Country\",\n        accessor: \"col5\",\n        className: \"companyCountry\",\n        Filter: SelectFilter,\n        filter: \"includes\",\n      },\n      {\n        Header: \"ZIP\",\n        accessor: \"col6\",\n        className: \"companyZIP\",\n        Filter: SelectFilter,\n        filter: \"includes\",\n      },\n      {\n        Header: \"ID\",\n        accessor: \"id\",\n        className: \"companyId\",\n        disableFilters: true,\n      },\n    ],\n    [companies]\n  );\n  const { getTableProps, getTableBodyProps, headerGroups, rows, prepareRow } =\n    useTable(\n      {\n        columns,\n        data,\n        initialState: {\n          sortBy: [{ id: \"col1\", desc: false }],\n          hiddenColumns: [\"id\"],\n        },\n      },\n      useFilters,\n      useSortBy\n    );\n\n  return (\n    <main>\n      <section className=\"companies card\">\n        <h2>\n          Companies\n          <button\n            type=\"button\"\n            id=\"companyAdd\"\n            onClick={handleAdd}\n            style={{ padding: \"0 .5rem\" }}\n          >\n            +\n          </button>\n        </h2>\n\n        <table {...getTableProps()} className=\"table\">\n          <thead>\n            {headerGroups.map((headerGroup) => (\n              <tr {...headerGroup.getHeaderGroupProps()}>\n                {headerGroup.headers.map((column) => (\n                  <th\n                    {...column.getHeaderProps(\n                      column.getSortByToggleProps({\n                        className: column.className,\n                      })\n                    )}\n                  >\n                    <div className=\"thContainer\">\n                      {column.render(\"Header\")}\n                      <span>\n                        {column.isSorted ? (\n                          column.isSortedDesc ? (\n                            <i className=\"fas fa-arrow-alt-circle-up sorted\"></i>\n                          ) : (\n                            <i className=\"fas fa-arrow-alt-circle-down sorted\"></i>\n                          )\n                        ) : (\n                          <i className=\"fas fa-arrow-alt-circle-down unSorted\"></i>\n                        )}\n                      </span>\n                    </div>\n                  </th>\n                ))}\n              </tr>\n            ))}\n            {headerGroups.map((headerGroup) => (\n              <tr\n                {...headerGroup.getHeaderGroupProps()}\n                className={\"filtersRow\"}\n              >\n                {headerGroup.headers.map((column) => (\n                  <th\n                    key={column.id}\n                    {...column.getHeaderProps({\n                      className: column.className,\n                    })}\n                  >\n                    <div className=\"filterContainer\">\n                      {column.canFilter ? column.render(\"Filter\") : null}\n                    </div>\n                  </th>\n                ))}\n              </tr>\n            ))}\n          </thead>\n          <tbody {...getTableBodyProps()}>\n            {rows.map((row) => {\n              prepareRow(row);\n              return (\n                <tr {...row.getRowProps()}>\n                  {row.cells.map((cell) => {\n                    return (\n                      <td\n                        {...cell.getCellProps({\n                          className: cell.column.className,\n                        })}\n                        onClick={\n                          cell.column.Header == \"Name\"\n                            ? () => {\n                                navigate(\n                                  `/company/${cell.row.allCells[7].value}`\n                                );\n                              }\n                            : () => {}\n                        }\n                      >\n                        {cell.render(\"Cell\")}\n                      </td>\n                    );\n                  })}\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n      </section>\n      <ToastContainer />\n    </main>\n  );\n}\n\nexport default Companies;\n","const dateFormatter = (dateInput) => {\n  const dateOutput = `${dateInput.slice(8, 10)}-${dateInput.slice(\n    5,\n    7\n  )}-${dateInput.slice(0, 4)}`;\n  return dateOutput;\n};\nexport { dateFormatter };\n"],"names":["$af0442719a4d3177$export$2e2bcd8739ae039","companies","$eCRxs","useEffect","message","sessionStorage","getItem","$dv2Dk","toast","success","position","POSITION","BOTTOM_RIGHT","removeItem","navigate","$kYfAi","useNavigate","data","useMemo","results","company","obj","icon","status","$7C6UD","jsx","className","col1","name","col2","col3","vat","col4","$gXTmb","dateFormatter","added","col5","country","col6","zip","toString","id","push","columns","Header","accessor","disableSortBy","disableFilters","Filter","$bjE0N","default","filter","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","$3NGAg","useTable","initialState","sortBy","desc","hiddenColumns","useFilters","useSortBy","jsxs","type","onClick","e","target","style","padding","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","getSortByToggleProps","render","isSorted","isSortedDesc","canFilter","row","getRowProps","cells","cell","getCellProps","allCells","value","ToastContainer","$c59d18b9d58e05d0$export$406508d2ca449bd","dateInput","slice"],"version":3,"file":"Companies.a62cdc56.js.map"}