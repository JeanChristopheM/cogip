{"mappings":"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","sources":["src/components/invoices/Invoices.jsx","src/logic/dateFormatter.js"],"sourcesContent":["import { useMemo, useEffect } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { useTable, useSortBy, useFilters } from \"react-table\";\r\nimport SelectFilter from \"../reusables/SelectFilter\";\r\nimport { dateFormatter } from \"../../logic/dateFormatter\";\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\n\r\nfunction Invoices({ invoices, contacts, companies }) {\r\n  useEffect(() => {\r\n    const message = sessionStorage.getItem(\"cogipToast\");\r\n    if (!message) return;\r\n    toast.success(message, {\r\n      position: toast.POSITION.BOTTOM_RIGHT,\r\n    });\r\n    sessionStorage.removeItem(\"cogipToast\");\r\n  }, []);\r\n  const navigate = useNavigate();\r\n  const handleAdd = (e) => {\r\n    navigate(`/${e.target.id}`);\r\n  };\r\n  /* SETTING UP TABLE */\r\n  const data = useMemo(() => {\r\n    let results = [];\r\n    for (let entry of invoices) {\r\n      const company = companies.find((el) => el.id == entry.company);\r\n      const contact = contacts.find((el) => el.id == entry.contact)\r\n        ? contacts.find((el) => el.id == entry.contact)\r\n        : null;\r\n      let arrow = company.status === \"Customer\" ? \"down\" : \"up\";\r\n      let obj = {\r\n        icon: <i className={`fas fa-arrow-${arrow}`}></i>,\r\n        col1: entry.reference,\r\n        col2: `${entry.amount}€`,\r\n        col3: `${entry.paid}€`,\r\n        col4: `${entry.due}€`,\r\n        col5: company.name,\r\n        col6: contact ? `${contact.firstname} ${contact.lastname}` : \"None\",\r\n        col7: dateFormatter(entry.received),\r\n        col8: entry.paidStatus ? \"Paid\" : \"To be paid\",\r\n        id: entry.id,\r\n      };\r\n      results.push(obj);\r\n    }\r\n    return results;\r\n  }, [invoices]);\r\n  const columns = useMemo(\r\n    () => [\r\n      {\r\n        Header: \"\",\r\n        accessor: \"icon\",\r\n        className: \"invoiceIcon\",\r\n        disableSortBy: true,\r\n        disableFilters: true,\r\n      },\r\n      {\r\n        Header: \"Reference\",\r\n        accessor: \"col1\",\r\n        className: \"invoiceReference\",\r\n        disableFilters: true,\r\n      },\r\n      {\r\n        Header: \"Amount\",\r\n        accessor: \"col2\",\r\n        className: \"invoiceAmount\",\r\n        disableFilters: true,\r\n      },\r\n      {\r\n        Header: \"Paid\",\r\n        accessor: \"col3\",\r\n        className: \"invoicePaid\",\r\n        disableFilters: true,\r\n      },\r\n      {\r\n        Header: \"Due\",\r\n        accessor: \"col4\",\r\n        className: \"invoiceDue\",\r\n        disableFilters: true,\r\n      },\r\n      {\r\n        Header: \"Company\",\r\n        accessor: \"col5\",\r\n        className: \"invoiceCompany\",\r\n        Filter: SelectFilter,\r\n        filter: \"includes\",\r\n      },\r\n      {\r\n        Header: \"Contact\",\r\n        accessor: \"col6\",\r\n        className: \"invoiceContact\",\r\n        Filter: SelectFilter,\r\n        filter: \"includes\",\r\n      },\r\n      {\r\n        Header: \"Received\",\r\n        accessor: \"col7\",\r\n        className: \"invoiceReceived\",\r\n        disableFilters: true,\r\n      },\r\n      {\r\n        Header: \"Status\",\r\n        accessor: \"col8\",\r\n        className: \"invoicePaidStatus\",\r\n        Filter: SelectFilter,\r\n        filter: \"includes\",\r\n      },\r\n      {\r\n        Header: \"ID\",\r\n        accessor: \"id\",\r\n        className: \"contactId\",\r\n        disableFilters: true,\r\n      },\r\n    ],\r\n    [invoices]\r\n  );\r\n  const { getTableProps, getTableBodyProps, headerGroups, rows, prepareRow } =\r\n    useTable(\r\n      {\r\n        columns,\r\n        data,\r\n        initialState: {\r\n          sortBy: [{ id: \"col1\", desc: false }],\r\n          hiddenColumns: [\"id\"],\r\n        },\r\n      },\r\n      useFilters,\r\n      useSortBy\r\n    );\r\n  const handleClick = (header, contactName, companyName, invoiceId) => {\r\n    switch (header) {\r\n      case \"Contact\":\r\n        if (contactName !== \"None\")\r\n          navigate(\r\n            `/contact/${\r\n              contacts.find(\r\n                (el) => `${el.firstname} ${el.lastname}` == contactName\r\n              ).id\r\n            }`\r\n          );\r\n        break;\r\n      case \"Company\":\r\n        navigate(\r\n          `/company/${companies.find((el) => el.name == companyName).id}`\r\n        );\r\n        break;\r\n      case \"Reference\":\r\n        navigate(`/invoice/${invoiceId}`);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n  return (\r\n    <main>\r\n      <section className=\"invoices card\">\r\n        <h2>\r\n          Invoices\r\n          <button\r\n            type=\"button\"\r\n            id=\"invoiceAdd\"\r\n            onClick={handleAdd}\r\n            style={{ padding: \"0 .5rem\" }}\r\n          >\r\n            +\r\n          </button>\r\n        </h2>\r\n        <table className=\"table\" {...getTableProps()}>\r\n          <thead>\r\n            {headerGroups.map((headerGroup) => (\r\n              <tr {...headerGroup.getHeaderGroupProps()}>\r\n                {headerGroup.headers.map((column) => (\r\n                  <th\r\n                    {...column.getHeaderProps(\r\n                      column.getSortByToggleProps({\r\n                        className: column.className,\r\n                      })\r\n                    )}\r\n                  >\r\n                    <div className=\"thContainer\">\r\n                      {column.render(\"Header\")}\r\n                      <span>\r\n                        {column.isSorted ? (\r\n                          column.isSortedDesc ? (\r\n                            <i className=\"fas fa-arrow-alt-circle-up sorted\"></i>\r\n                          ) : (\r\n                            <i className=\"fas fa-arrow-alt-circle-down sorted\"></i>\r\n                          )\r\n                        ) : (\r\n                          <i className=\"fas fa-arrow-alt-circle-down unSorted\"></i>\r\n                        )}\r\n                      </span>\r\n                    </div>\r\n                  </th>\r\n                ))}\r\n              </tr>\r\n            ))}\r\n            {headerGroups.map((headerGroup) => (\r\n              <tr\r\n                {...headerGroup.getHeaderGroupProps()}\r\n                className={\"filtersRow\"}\r\n              >\r\n                {headerGroup.headers.map((column) => (\r\n                  <th\r\n                    key={column.id}\r\n                    {...column.getHeaderProps({\r\n                      className: column.className,\r\n                    })}\r\n                  >\r\n                    <div className=\"filterContainer\">\r\n                      {column.canFilter ? column.render(\"Filter\") : null}\r\n                    </div>\r\n                  </th>\r\n                ))}\r\n              </tr>\r\n            ))}\r\n          </thead>\r\n          <tbody {...getTableBodyProps()}>\r\n            {rows.map((row) => {\r\n              prepareRow(row);\r\n              return (\r\n                <tr {...row.getRowProps()}>\r\n                  {row.cells.map((cell) => {\r\n                    return (\r\n                      <td\r\n                        {...cell.getCellProps({\r\n                          className: cell.column.className,\r\n                        })}\r\n                        onClick={() => {\r\n                          handleClick(\r\n                            cell.column.Header,\r\n                            cell.row.allCells[6].value,\r\n                            cell.row.allCells[5].value,\r\n                            cell.row.allCells[9].value\r\n                          );\r\n                        }}\r\n                      >\r\n                        {cell.render(\"Cell\")}\r\n                      </td>\r\n                    );\r\n                  })}\r\n                </tr>\r\n              );\r\n            })}\r\n          </tbody>\r\n        </table>\r\n      </section>\r\n      <ToastContainer />\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default Invoices;\r\n","const dateFormatter = (dateInput) => {\r\n  const dateOutput = `${dateInput.slice(8, 10)}-${dateInput.slice(\r\n    5,\r\n    7\r\n  )}-${dateInput.slice(0, 4)}`;\r\n  return dateOutput;\r\n};\r\nexport { dateFormatter };\r\n"],"names":["$d462550c5b3a69a6$export$2e2bcd8739ae039","invoices","contacts","companies","$eCRxs","useEffect","message","sessionStorage","getItem","$dv2Dk","toast","success","position","POSITION","BOTTOM_RIGHT","removeItem","navigate","$kYfAi","useNavigate","data","useMemo","results","entry","company","find","el","id","contact","arrow","status","obj","icon","$7C6UD","jsx","className","col1","reference","col2","amount","col3","paid","col4","due","col5","name","col6","firstname","lastname","col7","$gXTmb","dateFormatter","received","col8","paidStatus","push","columns","Header","accessor","disableSortBy","disableFilters","Filter","$bjE0N","default","filter","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","$3NGAg","useTable","initialState","sortBy","desc","hiddenColumns","useFilters","useSortBy","jsxs","type","onClick","e","target","style","padding","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","getSortByToggleProps","render","isSorted","isSortedDesc","canFilter","row","getRowProps","cells","cell","getCellProps","header","contactName","companyName","invoiceId","handleClick","allCells","value","ToastContainer","$c59d18b9d58e05d0$export$406508d2ca449bd","dateInput","slice"],"version":3,"file":"Invoices.a57dbee8.js.map"}