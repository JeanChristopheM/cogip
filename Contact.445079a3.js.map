{"mappings":"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","sources":["src/components/contacts/Contact.jsx","src/components/contacts/ContactControls.jsx","src/components/reusables/CompanySelector.jsx","src/logic/formValidation.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport ContactControls from \"./ContactControls.jsx\";\nimport CompanySelector from \"../reusables/CompanySelector.jsx\";\nimport handleRequests from \"../../logic/handleRequests\";\nimport { contactVerify } from \"../../logic/formValidation\";\nimport ContactIllustration from \"../reusables/ContactIllustration.jsx\";\n\n// toaster\nimport { ToastContainer, toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\n// end toaster\n\nfunction Contact({ contacts, companies, setIsLoaded, isAuth }) {\n  const loaded = contacts.length > 0 ? true : false;\n  const params = useParams();\n  const navigate = useNavigate();\n  const contact = contacts.find((el) => el.id == params.contactId);\n  const [isModifying, setIsModifying] = useState(false);\n  const [isDeleting, setIsDeleting] = useState(false);\n  const [isFetching, setIsFetching] = useState(false);\n  const [selectorAmount, setSelectorAmount] = useState(\n    contact.companies.length\n  );\n  useEffect(() => {\n    if (!contact) navigate(\"/contacts\");\n  }, [contacts]);\n\n  const handleCompanyChange = (company) => {\n    return;\n  };\n  const getCompaniesArray = (nodeList) => {\n    let compArr = [];\n    for (let node of nodeList) {\n      compArr.push(\n        companies.find((company) => (company.name == node.value ? true : false))\n          .id\n      );\n    }\n    return [...new Set([...compArr])];\n  };\n  const submit = async (e) => {\n    e.preventDefault();\n    setIsFetching(true);\n    const formData = {\n      firstname: e.target.contactFirstname.value,\n      lastname: e.target.contactLastname.value,\n      companies: getCompaniesArray(e.target.company),\n      email: e.target.contactEmail.value,\n      phonenumber: e.target.contactPhonenumber.value,\n    };\n    let check = contactVerify(formData);\n    if (check.ok) {\n      const { status, message, dataPackage } = await handleRequests(\n        \"PUT\",\n        `https://csharpproject.somee.com/api/contact/${params.contactId}`,\n        isAuth.jwt,\n        formData\n      );\n      setIsLoaded(false);\n      setIsFetching(false);\n      if (status === 200) {\n        setTimeout(() => {\n          toast.success(message, {\n            position: toast.POSITION.BOTTOM_RIGHT,\n          });\n        }, 250);\n      } else {\n        setTimeout(() => {\n          toast.error(message, {\n            position: toast.POSITION.BOTTOM_RIGHT,\n          });\n        }, 250);\n      }\n    } else {\n      setIsFetching(false);\n      const issues = Object.keys(check);\n      setTimeout(() => {\n        for (let issue of issues) {\n          if (issue !== \"ok\") {\n            toast.error(check[issue], {\n              position: toast.POSITION.BOTTOM_RIGHT,\n            });\n          }\n        }\n      }, 250);\n    }\n  };\n  const handleModif = async (e) => {\n    return;\n  };\n  const handleDelete = async () => {\n    setIsFetching(true);\n    const { status, message } = await handleRequests(\n      \"DELETE\",\n      `https://csharpproject.somee.com/api/Contact/${contact.id}`,\n      isAuth.jwt\n    );\n    setIsFetching(false);\n    if (status !== 200) {\n      toast.error(\"There was an error deleting this contact\", {\n        position: toast.POSITION.BOTTOM_RIGHT,\n      });\n    }\n    sessionStorage.setItem(\"cogipToast\", \"Success !\");\n    setIsDeleting(false);\n    setIsLoaded(false);\n  };\n  const handleAddCompSelector = () => {\n    setSelectorAmount((amount) => amount + 1);\n  };\n  const handleRemoveCompSelector = () => {\n    setSelectorAmount((amount) => (amount > 1 ? amount - 1 : amount));\n  };\n  const renderSelector = (amount) => {\n    let selectorArray = [];\n    for (let x = 0; x < amount; x++) {\n      selectorArray.push(\n        <div className=\"contactGrid__section--child selectors\" key={x}>\n          <label>Company Selector : </label>\n          <CompanySelector\n            companies={companies}\n            currentCompany={\n              companies.filter((el) => contact.companies.includes(el.id))[x] ||\n              \"\"\n            }\n            handleCompanyChange={handleCompanyChange}\n            name={\"company\"}\n          />\n        </div>\n      );\n    }\n    return selectorArray;\n  };\n  return (\n    <main>\n      {isFetching || !loaded || !contact ? (\n        <div className=\"fetching\">\n          <div className=\"lds-dual-ring\"></div>\n        </div>\n      ) : (\n        <div className=\"card\">\n          <h2>Details :</h2>\n          {isModifying ? (\n            <form className=\"contactGrid\" onSubmit={submit} method=\"post\">\n              <fieldset className=\"contactGrid__section\">\n                <legend>Contact</legend>\n                <div className=\"contactGrid__section--child infos\">\n                  <label htmlFor=\"contactFirstname\" className=\"labels\">\n                    Firstname :{\" \"}\n                  </label>\n                  <input\n                    type=\"text\"\n                    id=\"contactFirstname\"\n                    name=\"contactFirstname\"\n                    defaultValue={contact.firstname}\n                  />\n                </div>\n                <div className=\"contactGrid__section--child infos\">\n                  <label htmlFor=\"contactLastname\" className=\"labels\">\n                    Lastname :{\" \"}\n                  </label>\n                  <input\n                    type=\"text\"\n                    id=\"contactLastname\"\n                    name=\"contactLastname\"\n                    defaultValue={contact.lastname}\n                  />\n                </div>\n                <div className=\"contactGrid__section--child infos\">\n                  <label htmlFor=\"contactEmail\" className=\"labels\">\n                    Email :{\" \"}\n                  </label>\n                  <input\n                    type=\"text\"\n                    id=\"contactEmail\"\n                    name=\"contactEmail\"\n                    defaultValue={contact.email}\n                  />\n                </div>\n                <div className=\"contactGrid__section--child infos\">\n                  <label htmlFor=\"contactPhonenumber\" className=\"labels\">\n                    Phone number :{\" \"}\n                  </label>\n                  <input\n                    type=\"text\"\n                    id=\"contactPhonenumber\"\n                    name=\"contactPhonenumber\"\n                    defaultValue={contact.phonenumber}\n                  />\n                </div>\n              </fieldset>\n\n              <fieldset className=\"contactGrid__section from\">\n                <legend>\n                  From\n                  <button\n                    type=\"button\"\n                    id=\"addCompanySelector\"\n                    onClick={handleAddCompSelector}\n                    style={{ padding: \"0 .5rem\" }}\n                  >\n                    +\n                  </button>\n                  <button\n                    type=\"button\"\n                    id=\"removeCompanySelector\"\n                    onClick={handleRemoveCompSelector}\n                    style={{ padding: \"0 .5rem\" }}\n                  >\n                    -\n                  </button>\n                </legend>\n                {renderSelector(selectorAmount)}\n              </fieldset>\n              <fieldset className=\"decoration\">\n                <ContactIllustration />\n              </fieldset>\n              <ContactControls\n                isModifying={isModifying}\n                setIsModifying={setIsModifying}\n                isDeleting={isDeleting}\n                setIsDeleting={setIsDeleting}\n                handleModif={handleModif}\n                handleDelete={handleDelete}\n              />\n            </form>\n          ) : (\n            <div className=\"contactGrid\">\n              <section className=\"contactGrid__section\">\n                <h3>Contact</h3>\n                <div className=\"contactGrid__section--child infos\">\n                  <span className=\"labels\">Firstname : </span>\n                  <span id=\"contactFirstname\" className=\"bigger\">\n                    {contact.firstname}\n                  </span>\n                </div>\n                <div className=\"contactGrid__section--child infos\">\n                  <span className=\"labels\">Lastname : </span>\n                  <span id=\"contactLastname\" className=\"bigger\">\n                    {contact.lastname}\n                  </span>\n                </div>\n                <div className=\"contactGrid__section--child infos\">\n                  <span className=\"labels\">Email : </span>\n                  <span id=\"contactEmail\">{contact.email}</span>\n                </div>\n                <div className=\"contactGrid__section--child infos\">\n                  <span className=\"labels\">Phone number : </span>\n                  <span id=\"contactPhonenumber\">{contact.phonenumber}</span>\n                </div>\n              </section>\n              <section className=\"contactGrid__section\">\n                <h3>From</h3>\n                <div className=\"contactGrid__section--child\">\n                  <div className=\"companyContainer\">\n                    {companies.map((el) => {\n                      if (contact.companies.includes(el.id))\n                        return (\n                          <div className=\"companyCard\" key={el.id}>\n                            <p\n                              id=\"contactCompany\"\n                              onClick={() => {\n                                navigate(`/company/${el.id}`);\n                              }}\n                              style={{ cursor: \"pointer\" }}\n                              key={el.id}\n                            >\n                              {el.name}\n                            </p>\n                            <p>{el.status}</p>\n                          </div>\n                        );\n                    })}\n                  </div>\n                </div>\n              </section>\n              <section className=\"decoration\">\n                <ContactIllustration />\n              </section>\n              {isAuth.role == \"Admin\" ? (\n                <ContactControls\n                  isModifying={isModifying}\n                  setIsModifying={setIsModifying}\n                  isDeleting={isDeleting}\n                  setIsDeleting={setIsDeleting}\n                  handleModif={handleModif}\n                  handleDelete={handleDelete}\n                />\n              ) : (\n                \"\"\n              )}\n            </div>\n          )}\n        </div>\n      )}\n      <ToastContainer />\n    </main>\n  );\n}\n\nexport default Contact;\n","function ContactControls({\n  isModifying,\n  isDeleting,\n  setIsModifying,\n  setIsDeleting,\n  handleModif,\n  handleDelete,\n}) {\n  if (isModifying) {\n    return (\n      <div className={\"contactControls\"}>\n        <button onClick={handleModif}>Submit</button>\n        <button\n          type=\"button\"\n          onClick={() => {\n            setIsModifying(false);\n          }}\n        >\n          Cancel\n        </button>\n      </div>\n    );\n  }\n  if (isDeleting) {\n    return (\n      <div className={\"contactControls\"}>\n        <button type=\"button\" onClick={handleDelete}>\n          Confirm\n        </button>\n        <button\n          type=\"button\"\n          onClick={() => {\n            setIsDeleting(false);\n          }}\n        >\n          Cancel\n        </button>\n      </div>\n    );\n  }\n  return (\n    <div className={\"contactControls\"}>\n      <button\n        type=\"button\"\n        onClick={() => {\n          setIsModifying(true);\n        }}\n      >\n        Modify\n      </button>\n      <button\n        type=\"button\"\n        onClick={() => {\n          setIsDeleting(true);\n        }}\n      >\n        Delete\n      </button>\n    </div>\n  );\n}\n\nexport default ContactControls;\n","function CompanySelector({\n  companies,\n  handleCompanyChange,\n  currentCompany,\n  name,\n}) {\n  return (\n    <select\n      onChange={(e) => {\n        let company = companies.find((el) => el.name == e.target.value)\n          ? companies.find((el) => el.name == e.target.value)\n          : \"\";\n        handleCompanyChange(company);\n      }}\n      defaultValue={currentCompany.name}\n      name={name}\n      required\n    >\n      <option value=\"\">Select a company</option>\n      {companies.map((company) => {\n        return (\n          <option value={company.name} key={company.id}>\n            {company.name}\n          </option>\n        );\n      })}\n    </select>\n  );\n}\n\nexport default CompanySelector;\n","const invoiceVerify = (dataToVerify) => {\n  let response = {};\n  if (!dataToVerify.reference) response.reference = \"Please enter a reference\";\n  if (!dataToVerify.company) response.company = \"Please select a company\";\n  if (!dataToVerify.amount) response.amount = \"Please enter an amount\";\n  if (!dataToVerify.received) response.received = \"Please select a date\";\n  if (dataToVerify.paidStatus !== false && dataToVerify.paidStatus !== true)\n    response.paid = \"Please select a paid status\";\n  response.ok = Object.keys(response).length > 0 ? false : true;\n  return response;\n};\nconst contactVerify = (dataToVerify) => {\n  let response = {};\n  if (!dataToVerify.firstname) response.firstname = \"Please enter a firstname\";\n  if (!dataToVerify.lastname) response.lastname = \"Please enter a lastname\";\n  if (!dataToVerify.companies) response.companies = \"Please select a contact\";\n  if (!dataToVerify.email) response.email = \"Please enter an email\";\n  if (!dataToVerify.phonenumber)\n    response.phonenumber = \"Please enter a phone number\";\n  response.ok = Object.keys(response).length > 0 ? false : true;\n  return response;\n};\n\nconst companyVerify = (dataToVerify) => {\n  let response = {};\n  if (!dataToVerify.name) response.name = \"Please enter a name\";\n  if (!dataToVerify.vat) response.vat = \"Please enter a vat number\";\n  if (!dataToVerify.town) response.town = \"Please enter a town\";\n  if (!dataToVerify.street) response.street = \"Please enter a street\";\n  if (!dataToVerify.streetnumber)\n    response.streetnumber = \"Please enter a street number\";\n  if (!dataToVerify.country) response.country = \"Please enter a country\";\n  if (!dataToVerify.status) response.status = \"Please select a status\";\n  response.ok = Object.keys(response).length > 0 ? false : true;\n  return response;\n};\n\nexport { invoiceVerify, contactVerify, companyVerify };\n"],"names":["$b8b37f0a6f9246e4$export$2e2bcd8739ae039","contacts","companies","setIsLoaded","isAuth","loaded","length","params","$kYfAi","useParams","navigate","useNavigate","contact","find","el","id","contactId","isModifying","setIsModifying","$eCRxs","useState","isDeleting","setIsDeleting","isFetching","setIsFetching","selectorAmount","setSelectorAmount","useEffect","handleCompanyChange","company","getCompaniesArray","nodeList","compArr","node","push","name","value","Set","handleModif","async","e","handleDelete","status","message","$9aCo1","default","jwt","$dv2Dk","toast","error","position","POSITION","BOTTOM_RIGHT","sessionStorage","setItem","$7C6UD","jsxs","className","onSubmit","preventDefault","formData","firstname","target","contactFirstname","lastname","contactLastname","email","contactEmail","phonenumber","contactPhonenumber","check","$5H5kc","contactVerify","ok","dataPackage","setTimeout","success","issues","Object","keys","issue","method","htmlFor","type","defaultValue","onClick","amount","style","padding","selectorArray","x","$4yknE","currentCompany","filter","includes","renderSelector","$3Ui4D","$9jFXu","map","cursor","role","jsx","ToastContainer","$5ed51abd9418945a$export$2e2bcd8739ae039","$27c888b5041dae3c$export$2e2bcd8739ae039","onChange","required","$42551951195d288c$export$7e6a64f84fea9213","dataToVerify","response","reference","received","paidStatus","paid","$42551951195d288c$export$9204046200024146","$42551951195d288c$export$927967c6383eee08","vat","town","street","streetnumber","country"],"version":3,"file":"Contact.445079a3.js.map"}