{"mappings":"2fA4LAA,YAjLqBC,UAACA,EAASC,YAAEA,EAAWC,OAAEA,IAC5C,MAAOC,EAAgBC,GAAqBC,EAAAC,SAAS,IAC9CC,EAAYC,GAAiBH,EAAAC,UAAS,GAC7CD,EAAAI,WAAS,KACP,MAAMC,EAAUC,eAAeC,QAAQ,cACvC,IAAKF,EAAS,OACd,MAAMG,EAAeH,EAAQI,MAAM,KACnCC,EAAAC,MAAMH,EAAa,IAAIA,EAAa,GAAI,CACtCI,SAAUF,EAAAC,MAAME,SAASC,eAE3BR,eAAeS,WAAW,gBACzB,CAACb,IACJ,MAkDMc,EAAuBC,MA2B7B,OAAMC,EAAAC,KACH,OAAI,kBACF,MAAG,CAACC,UAAU,kCACZ,KAAE,UAAC,4BACH,OAAI,CAACA,UAAU,cAAcC,SAjFlBC,MAAUC,IAC1BA,EAAEC,iBACFrB,GAAc,GACd,MAWMsB,EAAW,CACfC,UAAWH,EAAEI,OAAOD,UAAUT,MAC9BW,SAAUL,EAAEI,OAAOC,SAASX,MAC5BtB,UAdqB,CAAIkC,IACzB,IAAIC,EAAU,GACd,IAAK,IAAIC,KAAQF,EACfC,EAAQE,KACNrC,EAAUsC,MAAMC,GACdA,EAAQC,MAAQJ,EAAKd,QACrBmB,IAGN,MAAO,IAAI,IAAIC,IAAI,IAAIP,MAKZQ,CAAkBf,EAAEI,OAAOO,SACtCK,MAAOhB,EAAEI,OAAOY,MAAMtB,MACtBuB,YAAajB,EAAEI,OAAOa,YAAYvB,OAEpCwB,QAAQC,IAAIjB,GACZ,IAAIkB,EAAQC,EAAAC,cAAcpB,GAC1B,GAAIkB,EAAMG,GAAI,CACZ,MAAOC,OAACA,EAAM1C,QAAEA,EAAO2C,YAAEA,SAAsBC,EAAAC,QAC7C,OACA,8CACArD,EAAOsD,IACP1B,GAEFtB,GAAc,GACdP,GAAY,GACG,MAAXmD,EACFzC,eAAe8C,QAAQ,aAAc,qBAClC9C,eAAe8C,QAAQ,aAAY,SAAW/C,SAC9C,CACLF,GAAc,GACd,MAAMkD,EAASC,OAAOC,KAAKZ,GAC3Ba,YAAU,KACR,IAAK,IAAIC,KAASJ,EACF,OAAVI,GACF/C,EAAAC,MAAM+C,MAAMf,EAAMc,GAAQ,CACxB7C,SAAUF,EAAAC,MAAME,SAASC,iBAI9B,wBAoCE,MAAG,CAACM,UAAU,+BACZ,WAAQ,iBACN,SAAM,UAAC,mBACP,MAAG,iBACD,QAAK,CAACuC,QAAQ,qBAAY,uBAC1B,QAAK,CACJxB,KAAK,YACLC,GAAG,YACHwB,KAAK,OACLC,YAAY,cACZC,UAAQ,cAGX,MAAG,iBACD,QAAK,CAACH,QAAQ,oBAAW,sBACzB,QAAK,CACJxB,KAAK,WACLC,GAAG,WACHwB,KAAK,OACLC,YAAY,cACZC,UAAQ,cAGX,MAAG,iBACD,QAAK,CAACH,QAAQ,iBAAQ,mBACtB,QAAK,CACJxB,KAAK,QACLC,GAAG,QACHwB,KAAK,OACLC,YAAY,8BACZC,UAAQ,cAGX,MAAG,iBACD,QAAK,CAACH,QAAQ,uBAAc,0BAC5B,QAAK,CACJxB,KAAK,cACLC,GAAG,cACHwB,KAAK,OACLC,YAAY,kBACZC,UAAQ,iBAIb,WAAQ,kBACN,SAAM,WAAC,aAEL,SAAM,CACLF,KAAK,SACLxB,GAAG,qBACH2B,QA/EW,KACzBhE,GAAmBiE,GAAWA,EAAS,KA+EzBC,MAAO,CAAEC,QAAS,oBACnB,YAGA,SAAM,CACLN,KAAK,SACLxB,GAAG,wBACH2B,QApFc,KAC5BhE,GAAmBiE,GAAYA,EAAS,EAAIA,EAAS,EAAIA,KAoF3CC,MAAO,CAAEC,QAAS,oBACnB,SAnFK,CAAIF,IACtB,IAAIG,EAAgB,GACpB,IAAK,IAAIC,EAAI,EAAGA,EAAIJ,EAAQI,IAC1BD,EAAcnC,KAAId,EAAAC,KACf,MAAG,iBACD,QAAK,UAAC,8BACNkD,EAAAnB,QAAe,CACdvD,UAAWA,EACX2E,eAAgB,GAChBtD,oBAAqBA,EACrBmB,KAAM,WACDiC,OAKb,OAAOD,GAuEII,CAAezE,eAGnB,SAAM,UAAC,oBAET,MAAG,CAACsB,UAAU,0BACZoD,EAAAtB,QAAmB,YAErBxC,EAAA+D,eAAc,OAEhBvE,EAAUgB,EAAAwD,IACR,MAAG,CAACtD,UAAU,+BACZ,MAAG,CAACA,UAAU,oBAEf,6JCvLV,MAAMuD,EAAiBC,IACrB,IAAIC,EAAW,GAQf,OAPKD,EAAaE,YAAWD,EAASC,UAAY,4BAC7CF,EAAa1C,UAAS2C,EAAS3C,QAAU,2BACzC0C,EAAaZ,SAAQa,EAASb,OAAS,0BACvCY,EAAaG,WAAUF,EAASE,SAAW,yBAChB,IAA5BH,EAAaI,aAAoD,IAA5BJ,EAAaI,aACpDH,EAASI,KAAO,+BAClBJ,EAAS/B,KAAKQ,OAAOC,KAAKsB,GAAUK,OAAS,GACtCL,GAEHM,EAAiBP,IACrB,IAAIC,EAAW,GAQf,OAPKD,EAAalD,YAAWmD,EAASnD,UAAY,4BAC7CkD,EAAahD,WAAUiD,EAASjD,SAAW,2BAC3CgD,EAAajF,YAAWkF,EAASlF,UAAY,2BAC7CiF,EAAarC,QAAOsC,EAAStC,MAAQ,yBACrCqC,EAAapC,cAChBqC,EAASrC,YAAc,+BACzBqC,EAAS/B,KAAKQ,OAAOC,KAAKsB,GAAUK,OAAS,GACtCL,GAGHO,EAAiBR,IACrB,IAAIC,EAAW,GAUf,OATKD,EAAazC,OAAM0C,EAAS1C,KAAO,uBACnCyC,EAAaS,MAAKR,EAASQ,IAAM,6BACjCT,EAAaU,OAAMT,EAASS,KAAO,uBACnCV,EAAaW,SAAQV,EAASU,OAAS,yBACvCX,EAAaY,eAChBX,EAASW,aAAe,gCACrBZ,EAAaa,UAASZ,EAASY,QAAU,0BACzCb,EAAa7B,SAAQ8B,EAAS9B,OAAS,0BAC5C8B,EAAS/B,KAAKQ,OAAOC,KAAKsB,GAAUK,OAAS,GACtCL,4FCJTa,YA9B0B/F,UACxBA,EAASqB,oBACTA,EAAmBsD,eACnBA,EAAcnC,KACdA,IAEA,OAAMjB,EAAAC,KACH,SAAM,CACLwE,SAAWpE,IACT,IAAIW,EAAUvC,EAAUsC,MAAM2D,GAAOA,EAAGzD,MAAQZ,EAAEI,OAAOV,QACrDtB,EAAUsC,MAAM2D,GAAOA,EAAGzD,MAAQZ,EAAEI,OAAOV,QAC3C,GACJD,EAAoBkB,IAEtB2D,aAAcvB,EAAenC,KAC7BA,KAAMA,EACN2B,UAAQ,kBAEP,SAAM,CAAC7C,MAAM,YAAG,qBAChBtB,EAAUmG,KAAK5D,GACRhB,EAAAwD,IACH,SAAM,CAACzD,MAAOiB,EAAQC,cACpBD,EAAQC,MADuBD,EAAQE","sources":["src/components/contacts/ContactAdd.jsx","src/logic/formValidation.js","src/components/reusables/CompanySelector.jsx"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport { contactVerify } from \"../../logic/formValidation\";\r\nimport handleRequests from \"../../logic/handleRequests\";\r\nimport CompanySelector from \"../reusables/CompanySelector\";\r\n\r\n// toaster\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport ContactIllustration from \"../reusables/ContactIllustration\";\r\n// end toaster\r\n\r\nfunction ContactAdd({ companies, setIsLoaded, isAuth }) {\r\n  const [selectorAmount, setSelectorAmount] = useState(1);\r\n  const [isFetching, setIsFetching] = useState(false);\r\n  useEffect(() => {\r\n    const message = sessionStorage.getItem(\"cogipToast\");\r\n    if (!message) return;\r\n    const messageArray = message.split(\",\");\r\n    toast[messageArray[0]](messageArray[1], {\r\n      position: toast.POSITION.BOTTOM_RIGHT,\r\n    });\r\n    sessionStorage.removeItem(\"cogipToast\");\r\n  }, [isFetching]);\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    setIsFetching(true);\r\n    const getCompaniesArray = (nodeList) => {\r\n      let compArr = [];\r\n      for (let node of nodeList) {\r\n        compArr.push(\r\n          companies.find((company) =>\r\n            company.name == node.value ? true : false\r\n          ).id\r\n        );\r\n      }\r\n      return [...new Set([...compArr])];\r\n    };\r\n    const formData = {\r\n      firstname: e.target.firstname.value,\r\n      lastname: e.target.lastname.value,\r\n      companies: getCompaniesArray(e.target.company),\r\n      email: e.target.email.value,\r\n      phonenumber: e.target.phonenumber.value,\r\n    };\r\n    console.log(formData);\r\n    let check = contactVerify(formData);\r\n    if (check.ok) {\r\n      const { status, message, dataPackage } = await handleRequests(\r\n        \"POST\",\r\n        \"https://csharpproject.somee.com/api/Contact\",\r\n        isAuth.jwt,\r\n        formData\r\n      );\r\n      setIsFetching(false);\r\n      setIsLoaded(false);\r\n      if (status === 200)\r\n        sessionStorage.setItem(\"cogipToast\", \"success,Success !\");\r\n      else sessionStorage.setItem(\"cogipToast\", `error,${message}`);\r\n    } else {\r\n      setIsFetching(false);\r\n      const issues = Object.keys(check);\r\n      setTimeout(() => {\r\n        for (let issue of issues) {\r\n          if (issue !== \"ok\") {\r\n            toast.error(check[issue], {\r\n              position: toast.POSITION.BOTTOM_RIGHT,\r\n            });\r\n          }\r\n        }\r\n      }, 500);\r\n    }\r\n  };\r\n\r\n  const handleCompanyChange = (value) => {\r\n    return;\r\n  };\r\n  const handleAddCompSelector = () => {\r\n    setSelectorAmount((amount) => amount + 1);\r\n  };\r\n  const handleRemoveCompSelector = () => {\r\n    setSelectorAmount((amount) => (amount > 1 ? amount - 1 : amount));\r\n  };\r\n  const renderSelector = (amount) => {\r\n    let selectorArray = [];\r\n    for (let x = 0; x < amount; x++) {\r\n      selectorArray.push(\r\n        <div>\r\n          <label>Company Selector : </label>\r\n          <CompanySelector\r\n            companies={companies}\r\n            currentCompany={\"\"}\r\n            handleCompanyChange={handleCompanyChange}\r\n            name={\"company\"}\r\n            key={x}\r\n          />\r\n        </div>\r\n      );\r\n    }\r\n    return selectorArray;\r\n  };\r\n  return (\r\n    <main>\r\n      <div className=\"contactAdd card\">\r\n        <h2>Fill up the form</h2>\r\n        <form className=\"contactForm\" onSubmit={handleSubmit}>\r\n          <div className=\"formContent\">\r\n            <fieldset>\r\n              <legend>Contact</legend>\r\n              <div>\r\n                <label htmlFor=\"firstname\">Firstname : </label>\r\n                <input\r\n                  name=\"firstname\"\r\n                  id=\"firstname\"\r\n                  type=\"text\"\r\n                  placeholder=\"Ex : Johnny\"\r\n                  required\r\n                />\r\n              </div>\r\n              <div>\r\n                <label htmlFor=\"lastname\">Lastname : </label>\r\n                <input\r\n                  name=\"lastname\"\r\n                  id=\"lastname\"\r\n                  type=\"text\"\r\n                  placeholder=\"Ex : Begood\"\r\n                  required\r\n                />\r\n              </div>\r\n              <div>\r\n                <label htmlFor=\"email\">Email : </label>\r\n                <input\r\n                  name=\"email\"\r\n                  id=\"email\"\r\n                  type=\"text\"\r\n                  placeholder=\"Ex : johnny.begood@yahoo.fr\"\r\n                  required\r\n                />\r\n              </div>\r\n              <div>\r\n                <label htmlFor=\"phonenumber\">Phone number : </label>\r\n                <input\r\n                  name=\"phonenumber\"\r\n                  id=\"phonenumber\"\r\n                  type=\"text\"\r\n                  placeholder=\"Ex : 0487272320\"\r\n                  required\r\n                />\r\n              </div>\r\n            </fieldset>\r\n            <fieldset>\r\n              <legend>\r\n                From\r\n                <button\r\n                  type=\"button\"\r\n                  id=\"addCompanySelector\"\r\n                  onClick={handleAddCompSelector}\r\n                  style={{ padding: \"0 .5rem\" }}\r\n                >\r\n                  +\r\n                </button>\r\n                <button\r\n                  type=\"button\"\r\n                  id=\"removeCompanySelector\"\r\n                  onClick={handleRemoveCompSelector}\r\n                  style={{ padding: \"0 .5rem\" }}\r\n                >\r\n                  -\r\n                </button>\r\n              </legend>\r\n              {renderSelector(selectorAmount)}\r\n            </fieldset>\r\n          </div>\r\n          <button>Submit</button>\r\n        </form>\r\n        <div className=\"formIllu\">\r\n          <ContactIllustration />\r\n        </div>\r\n        <ToastContainer />\r\n      </div>\r\n      {isFetching ? (\r\n        <div className=\"fetching dark\">\r\n          <div className=\"lds-dual-ring\"></div>\r\n        </div>\r\n      ) : null}\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default ContactAdd;\r\n","const invoiceVerify = (dataToVerify) => {\r\n  let response = {};\r\n  if (!dataToVerify.reference) response.reference = \"Please enter a reference\";\r\n  if (!dataToVerify.company) response.company = \"Please select a company\";\r\n  if (!dataToVerify.amount) response.amount = \"Please enter an amount\";\r\n  if (!dataToVerify.received) response.received = \"Please select a date\";\r\n  if (dataToVerify.paidStatus !== false && dataToVerify.paidStatus !== true)\r\n    response.paid = \"Please select a paid status\";\r\n  response.ok = Object.keys(response).length > 0 ? false : true;\r\n  return response;\r\n};\r\nconst contactVerify = (dataToVerify) => {\r\n  let response = {};\r\n  if (!dataToVerify.firstname) response.firstname = \"Please enter a firstname\";\r\n  if (!dataToVerify.lastname) response.lastname = \"Please enter a lastname\";\r\n  if (!dataToVerify.companies) response.companies = \"Please select a contact\";\r\n  if (!dataToVerify.email) response.email = \"Please enter an email\";\r\n  if (!dataToVerify.phonenumber)\r\n    response.phonenumber = \"Please enter a phone number\";\r\n  response.ok = Object.keys(response).length > 0 ? false : true;\r\n  return response;\r\n};\r\n\r\nconst companyVerify = (dataToVerify) => {\r\n  let response = {};\r\n  if (!dataToVerify.name) response.name = \"Please enter a name\";\r\n  if (!dataToVerify.vat) response.vat = \"Please enter a vat number\";\r\n  if (!dataToVerify.town) response.town = \"Please enter a town\";\r\n  if (!dataToVerify.street) response.street = \"Please enter a street\";\r\n  if (!dataToVerify.streetnumber)\r\n    response.streetnumber = \"Please enter a street number\";\r\n  if (!dataToVerify.country) response.country = \"Please enter a country\";\r\n  if (!dataToVerify.status) response.status = \"Please select a status\";\r\n  response.ok = Object.keys(response).length > 0 ? false : true;\r\n  return response;\r\n};\r\n\r\nexport { invoiceVerify, contactVerify, companyVerify };\r\n","function CompanySelector({\r\n  companies,\r\n  handleCompanyChange,\r\n  currentCompany,\r\n  name,\r\n}) {\r\n  return (\r\n    <select\r\n      onChange={(e) => {\r\n        let company = companies.find((el) => el.name == e.target.value)\r\n          ? companies.find((el) => el.name == e.target.value)\r\n          : \"\";\r\n        handleCompanyChange(company);\r\n      }}\r\n      defaultValue={currentCompany.name}\r\n      name={name}\r\n      required\r\n    >\r\n      <option value=\"\">Select a company</option>\r\n      {companies.map((company) => {\r\n        return (\r\n          <option value={company.name} key={company.id}>\r\n            {company.name}\r\n          </option>\r\n        );\r\n      })}\r\n    </select>\r\n  );\r\n}\r\n\r\nexport default CompanySelector;\r\n"],"names":["$d2412bb43355d083$export$2e2bcd8739ae039","companies","setIsLoaded","isAuth","selectorAmount","setSelectorAmount","$eCRxs","useState","isFetching","setIsFetching","useEffect","message","sessionStorage","getItem","messageArray","split","$dv2Dk","toast","position","POSITION","BOTTOM_RIGHT","removeItem","handleCompanyChange","value","$7C6UD","jsxs","className","onSubmit","async","e","preventDefault","formData","firstname","target","lastname","nodeList","compArr","node","push","find","company","name","id","Set","getCompaniesArray","email","phonenumber","console","log","check","$5H5kc","contactVerify","ok","status","dataPackage","$9aCo1","default","jwt","setItem","issues","Object","keys","setTimeout","issue","error","htmlFor","type","placeholder","required","onClick","amount","style","padding","selectorArray","x","$4yknE","currentCompany","renderSelector","$3Ui4D","ToastContainer","jsx","$42551951195d288c$export$7e6a64f84fea9213","dataToVerify","response","reference","received","paidStatus","paid","length","$42551951195d288c$export$9204046200024146","$42551951195d288c$export$927967c6383eee08","vat","town","street","streetnumber","country","$27c888b5041dae3c$export$2e2bcd8739ae039","onChange","el","defaultValue","map"],"version":3,"file":"ContactAdd.eda409fd.js.map"}