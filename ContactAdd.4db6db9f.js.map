{"mappings":"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","sources":["src/components/contacts/ContactAdd.jsx","src/logic/formValidation.js","src/components/reusables/CompanySelector.jsx"],"sourcesContent":["import { useState, useEffect } from \"react\";\nimport { contactVerify } from \"../../logic/formValidation\";\nimport handleRequests from \"../../logic/handleRequests\";\nimport CompanySelector from \"../reusables/CompanySelector\";\n\n// toaster\nimport { ToastContainer, toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport ContactIllustration from \"../reusables/ContactIllustration\";\n// end toaster\n\nfunction ContactAdd({ companies, setIsLoaded, isAuth }) {\n  const [selectorAmount, setSelectorAmount] = useState(1);\n  const [isFetching, setIsFetching] = useState(false);\n  useEffect(() => {\n    const message = sessionStorage.getItem(\"cogipToast\");\n    if (!message) return;\n    const messageArray = message.split(\",\");\n    toast[messageArray[0]](messageArray[1], {\n      position: toast.POSITION.BOTTOM_RIGHT,\n    });\n    sessionStorage.removeItem(\"cogipToast\");\n  }, [isFetching]);\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setIsFetching(true);\n    const getCompaniesArray = (nodeList) => {\n      let compArr = [];\n      for (let node of nodeList) {\n        compArr.push(\n          companies.find((company) =>\n            company.name == node.value ? true : false\n          ).id\n        );\n      }\n      return [...new Set([...compArr])];\n    };\n    const formData = {\n      firstname: e.target.firstname.value,\n      lastname: e.target.lastname.value,\n      companies: getCompaniesArray(e.target.company),\n      email: e.target.email.value,\n      phonenumber: e.target.phonenumber.value,\n    };\n    console.log(formData);\n    let check = contactVerify(formData);\n    if (check.ok) {\n      const { status, message, dataPackage } = await handleRequests(\n        \"POST\",\n        \"https://csharpproject.somee.com/api/Contact\",\n        isAuth.jwt,\n        formData\n      );\n      setIsFetching(false);\n      setIsLoaded(false);\n      if (status === 200)\n        sessionStorage.setItem(\"cogipToast\", \"success,Success !\");\n      else sessionStorage.setItem(\"cogipToast\", `error,${message}`);\n    } else {\n      setIsFetching(false);\n      const issues = Object.keys(check);\n      setTimeout(() => {\n        for (let issue of issues) {\n          if (issue !== \"ok\") {\n            toast.error(check[issue], {\n              position: toast.POSITION.BOTTOM_RIGHT,\n            });\n          }\n        }\n      }, 500);\n    }\n  };\n\n  const handleCompanyChange = (value) => {\n    return;\n  };\n  const handleAddCompSelector = () => {\n    setSelectorAmount((amount) => amount + 1);\n  };\n  const handleRemoveCompSelector = () => {\n    setSelectorAmount((amount) => (amount > 1 ? amount - 1 : amount));\n  };\n  const renderSelector = (amount) => {\n    let selectorArray = [];\n    for (let x = 0; x < amount; x++) {\n      selectorArray.push(\n        <div>\n          <label>Company Selector : </label>\n          <CompanySelector\n            companies={companies}\n            currentCompany={\"\"}\n            handleCompanyChange={handleCompanyChange}\n            name={\"company\"}\n            key={x}\n          />\n        </div>\n      );\n    }\n    return selectorArray;\n  };\n  return (\n    <main>\n      <div className=\"contactAdd card\">\n        <h2>Fill up the form</h2>\n        <form className=\"contactForm\" onSubmit={handleSubmit} method=\"post\">\n          <div className=\"formContent\">\n            <fieldset>\n              <legend>Contact</legend>\n              <div>\n                <label htmlFor=\"firstname\">Firstname : </label>\n                <input\n                  name=\"firstname\"\n                  id=\"firstname\"\n                  type=\"text\"\n                  placeholder=\"Ex : Johnny\"\n                  required\n                />\n              </div>\n              <div>\n                <label htmlFor=\"lastname\">Lastname : </label>\n                <input\n                  name=\"lastname\"\n                  id=\"lastname\"\n                  type=\"text\"\n                  placeholder=\"Ex : Begood\"\n                  required\n                />\n              </div>\n              <div>\n                <label htmlFor=\"email\">Email : </label>\n                <input\n                  name=\"email\"\n                  id=\"email\"\n                  type=\"text\"\n                  placeholder=\"Ex : johnny.begood@yahoo.fr\"\n                  required\n                />\n              </div>\n              <div>\n                <label htmlFor=\"phonenumber\">Phone number : </label>\n                <input\n                  name=\"phonenumber\"\n                  id=\"phonenumber\"\n                  type=\"text\"\n                  placeholder=\"Ex : 0487272320\"\n                  required\n                />\n              </div>\n            </fieldset>\n            <fieldset>\n              <legend>\n                From\n                <button\n                  type=\"button\"\n                  id=\"addCompanySelector\"\n                  onClick={handleAddCompSelector}\n                  style={{ padding: \"0 .5rem\" }}\n                >\n                  +\n                </button>\n                <button\n                  type=\"button\"\n                  id=\"removeCompanySelector\"\n                  onClick={handleRemoveCompSelector}\n                  style={{ padding: \"0 .5rem\" }}\n                >\n                  -\n                </button>\n              </legend>\n              {renderSelector(selectorAmount)}\n            </fieldset>\n          </div>\n          <button>Submit</button>\n        </form>\n        <div className=\"formIllu\">\n          <ContactIllustration />\n        </div>\n        <ToastContainer />\n      </div>\n      {isFetching ? (\n        <div className=\"fetching dark\">\n          <div className=\"lds-dual-ring\"></div>\n        </div>\n      ) : null}\n    </main>\n  );\n}\n\nexport default ContactAdd;\n","const invoiceVerify = (dataToVerify) => {\n  let response = {};\n  if (!dataToVerify.reference) response.reference = \"Please enter a reference\";\n  if (!dataToVerify.company) response.company = \"Please select a company\";\n  if (!dataToVerify.amount) response.amount = \"Please enter an amount\";\n  if (!dataToVerify.received) response.received = \"Please select a date\";\n  if (dataToVerify.paidStatus !== false && dataToVerify.paidStatus !== true)\n    response.paid = \"Please select a paid status\";\n  response.ok = Object.keys(response).length > 0 ? false : true;\n  return response;\n};\nconst contactVerify = (dataToVerify) => {\n  let response = {};\n  if (!dataToVerify.firstname) response.firstname = \"Please enter a firstname\";\n  if (!dataToVerify.lastname) response.lastname = \"Please enter a lastname\";\n  if (!dataToVerify.companies) response.companies = \"Please select a contact\";\n  if (!dataToVerify.email) response.email = \"Please enter an email\";\n  if (!dataToVerify.phonenumber)\n    response.phonenumber = \"Please enter a phone number\";\n  response.ok = Object.keys(response).length > 0 ? false : true;\n  return response;\n};\n\nconst companyVerify = (dataToVerify) => {\n  let response = {};\n  if (!dataToVerify.name) response.name = \"Please enter a name\";\n  if (!dataToVerify.vat) response.vat = \"Please enter a vat number\";\n  if (!dataToVerify.town) response.town = \"Please enter a town\";\n  if (!dataToVerify.street) response.street = \"Please enter a street\";\n  if (!dataToVerify.streetnumber)\n    response.streetnumber = \"Please enter a street number\";\n  if (!dataToVerify.country) response.country = \"Please enter a country\";\n  if (!dataToVerify.status) response.status = \"Please select a status\";\n  response.ok = Object.keys(response).length > 0 ? false : true;\n  return response;\n};\n\nexport { invoiceVerify, contactVerify, companyVerify };\n","function CompanySelector({\n  companies,\n  handleCompanyChange,\n  currentCompany,\n  name,\n}) {\n  return (\n    <select\n      onChange={(e) => {\n        let company = companies.find((el) => el.name == e.target.value)\n          ? companies.find((el) => el.name == e.target.value)\n          : \"\";\n        handleCompanyChange(company);\n      }}\n      defaultValue={currentCompany.name}\n      name={name}\n      required\n    >\n      <option value=\"\">Select a company</option>\n      {companies.map((company) => {\n        return (\n          <option value={company.name} key={company.id}>\n            {company.name}\n          </option>\n        );\n      })}\n    </select>\n  );\n}\n\nexport default CompanySelector;\n"],"names":["$d2412bb43355d083$export$2e2bcd8739ae039","companies","setIsLoaded","isAuth","selectorAmount","setSelectorAmount","$eCRxs","useState","isFetching","setIsFetching","useEffect","message","sessionStorage","getItem","messageArray","split","$dv2Dk","toast","position","POSITION","BOTTOM_RIGHT","removeItem","handleCompanyChange","value","$7C6UD","jsxs","className","onSubmit","async","e","preventDefault","formData","firstname","target","lastname","nodeList","compArr","node","push","find","company","name","id","Set","getCompaniesArray","email","phonenumber","console","log","check","$5H5kc","contactVerify","ok","status","dataPackage","$9aCo1","default","jwt","setItem","issues","Object","keys","setTimeout","issue","error","method","htmlFor","type","placeholder","required","onClick","amount","style","padding","selectorArray","x","$4yknE","currentCompany","renderSelector","$3Ui4D","ToastContainer","jsx","$42551951195d288c$export$7e6a64f84fea9213","dataToVerify","response","reference","received","paidStatus","paid","length","$42551951195d288c$export$9204046200024146","$42551951195d288c$export$927967c6383eee08","vat","town","street","streetnumber","country","$27c888b5041dae3c$export$2e2bcd8739ae039","onChange","el","defaultValue","map"],"version":3,"file":"ContactAdd.4db6db9f.js.map"}