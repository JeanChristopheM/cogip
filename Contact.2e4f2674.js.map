{"mappings":"qhBA6SAA,YAhSkBC,SAACA,EAAQC,UAAEA,EAASC,YAAEA,EAAWC,OAAEA,IACnD,MAAMC,EAASJ,EAASK,OAAS,EAC3BC,EAASC,EAAAC,YACTC,EAAWF,EAAAG,cACXC,EAAUX,EAASY,MAAMC,GAAOA,EAAGC,IAAMR,EAAOS,aAC/CC,EAAaC,GAAkBC,EAAAC,UAAS,IACxCC,EAAYC,GAAiBH,EAAAC,UAAS,IACtCG,EAAYC,GAAiBL,EAAAC,UAAS,IACtCK,EAAgBC,GAAqBP,EAAAC,SAC1CR,EAAQV,UAAUI,QAEpBa,EAAAQ,WAAS,KACFf,GAASF,EAAS,eACtB,CAACT,IAEJ,MAAM2B,EAAuBC,MAGvBC,EAAqBC,IACzB,IAAIC,EAAU,GACd,IAAK,IAAIC,KAAQF,EACfC,EAAQE,KACNhC,EAAUW,MAAMgB,GAAaA,EAAQM,MAAQF,EAAKG,QAC/CrB,IAGP,MAAO,IAAI,IAAIsB,IAAI,IAAIL,MAiDnBM,EAAWC,MAAUC,MAGrBC,EAAYF,UAChBf,GAAc,GACd,MAAOkB,OAACA,EAAMC,QAAEA,SAAkBC,EAAAC,QAChC,SAAQ,+CACuCjC,EAAQG,KACvDX,EAAO0C,KAETtB,GAAc,GACC,MAAXkB,GACFK,EAAAC,MAAMC,MAAM,2CAA4C,CACtDC,SAAUH,EAAAC,MAAMG,SAASC,eAG7BC,eAAeC,QAAQ,aAAc,aACrChC,GAAc,GACdnB,GAAY,IA4Bd,OAAMoD,EAAAC,KACH,OAAI,YACFjC,GAAelB,GAAWO,SAKxB,MAAG,CAAC6C,UAAU,uBACZ,KAAE,UAAC,cACHxC,EAAWsC,EAAAC,KACT,OAAI,CAACC,UAAU,cAAcC,SAvG5BnB,MAAUC,IACpBA,EAAEmB,iBACFnC,GAAc,GACd,MAAMoC,EAAW,CACfC,UAAWrB,EAAEsB,OAAOC,iBAAiB3B,MACrC4B,SAAUxB,EAAEsB,OAAOG,gBAAgB7B,MACnClC,UAAW4B,EAAkBU,EAAEsB,OAAOjC,SACtCqC,MAAO1B,EAAEsB,OAAOK,aAAa/B,MAC7BgC,YAAa5B,EAAEsB,OAAOO,mBAAmBjC,OAE3C,IAAIkC,EAAQC,EAAAC,cAAcZ,GAC1B,GAAIU,EAAMG,GAAI,CACZ,MAAO/B,OAACA,EAAMC,QAAEA,EAAO+B,YAAEA,SAAsB9B,EAAAC,QAC7C,MAAK,+CAC0CtC,EAAOS,YACtDZ,EAAO0C,IACPc,GAEFzD,GAAY,GACZqB,GAAc,GACC,MAAXkB,EACFiC,YAAU,KACR5B,EAAAC,MAAM4B,QAAQjC,EAAS,CACrBO,SAAUH,EAAAC,MAAMG,SAASC,iBAE1B,KAEHuB,YAAU,KACR5B,EAAAC,MAAMC,MAAMN,EAAS,CACnBO,SAAUH,EAAAC,MAAMG,SAASC,iBAE1B,SAEA,CACL5B,GAAc,GACd,MAAMqD,EAASC,OAAOC,KAAKT,GAC3BK,YAAU,KACR,IAAK,IAAIK,KAASH,EACF,OAAVG,GACFjC,EAAAC,MAAMC,MAAMqB,EAAMU,GAAQ,CACxB9B,SAAUH,EAAAC,MAAMG,SAASC,iBAI9B,wBA4DM,WAAQ,CAACK,UAAU,uCACjB,SAAM,UAAC,mBACP,MAAG,CAACA,UAAU,qDACZ,QAAK,CAACwB,QAAQ,mBAAmBxB,UAAU,mBAAS,cACvC,aAEb,QAAK,CACJyB,KAAK,OACLnE,GAAG,mBACHoB,KAAK,mBACLgD,aAAcvE,EAAQiD,sBAGzB,MAAG,CAACJ,UAAU,qDACZ,QAAK,CAACwB,QAAQ,kBAAkBxB,UAAU,mBAAS,aACvC,aAEZ,QAAK,CACJyB,KAAK,OACLnE,GAAG,kBACHoB,KAAK,kBACLgD,aAAcvE,EAAQoD,qBAGzB,MAAG,CAACP,UAAU,qDACZ,QAAK,CAACwB,QAAQ,eAAexB,UAAU,mBAAS,UACvC,aAET,QAAK,CACJyB,KAAK,OACLnE,GAAG,eACHoB,KAAK,eACLgD,aAAcvE,EAAQsD,kBAGzB,MAAG,CAACT,UAAU,qDACZ,QAAK,CAACwB,QAAQ,qBAAqBxB,UAAU,mBAAS,iBACtC,aAEhB,QAAK,CACJyB,KAAK,OACLnE,GAAG,qBACHoB,KAAK,qBACLgD,aAAcvE,EAAQwD,2BAK3B,WAAQ,CAACX,UAAU,6CACjB,SAAM,WAAC,aAEL,SAAM,CACLyB,KAAK,SACLnE,GAAG,qBACHqE,QA3FS,KACzB1D,GAAmB2D,GAAWA,EAAS,KA2FvBC,MAAO,CAAEC,QAAS,oBACnB,YAGA,SAAM,CACLL,KAAK,SACLnE,GAAG,wBACHqE,QAhGY,KAC5B1D,GAAmB2D,GAAYA,EAAS,EAAIA,EAAS,EAAIA,KAgGzCC,MAAO,CAAEC,QAAS,oBACnB,SA/FG,CAAIF,IACtB,IAAIG,EAAgB,GACpB,IAAK,IAAIC,EAAI,EAAGA,EAAIJ,EAAQI,IAC1BD,EAActD,KAAIqB,EAAAC,KACf,MAAG,CAACC,UAAU,wDACZ,QAAK,UAAC,8BACNiC,EAAA7C,QAAe,CACd3C,UAAWA,EACXyF,eACEzF,EAAU0F,QAAQ9E,GAAOF,EAAQV,UAAU2F,SAAS/E,EAAGC,MAAK0E,IAC5D,GAEF7D,oBAAqBA,EACrBO,KAAM,cATkDsD,IAchE,OAAOD,GAiFMM,CAAerE,YAEjB,WAAQ,CAACgC,UAAU,4BACjBsC,EAAAlD,QAAmB,YAErBmD,EAAAnD,QAAe,CACd5B,YAAaA,EACbC,eAAgBA,EAChBG,WAAYA,EACZC,cAAeA,EACfgB,YAAaA,EACbG,aAAcA,cAIjB,MAAG,CAACgB,UAAU,+BACZ,UAAO,CAACA,UAAU,uCAChB,KAAE,UAAC,mBACH,MAAG,CAACA,UAAU,oDACZ,OAAI,CAACA,UAAU,kBAAS,uBACxB,OAAI,CAAC1C,GAAG,mBAAmB0C,UAAU,kBACnC7C,EAAQiD,sBAGZ,MAAG,CAACJ,UAAU,oDACZ,OAAI,CAACA,UAAU,kBAAS,sBACxB,OAAI,CAAC1C,GAAG,kBAAkB0C,UAAU,kBAClC7C,EAAQoD,qBAGZ,MAAG,CAACP,UAAU,oDACZ,OAAI,CAACA,UAAU,kBAAS,mBACxB,OAAI,CAAC1C,GAAG,wBAAgBH,EAAQsD,kBAElC,MAAG,CAACT,UAAU,oDACZ,OAAI,CAACA,UAAU,kBAAS,0BACxB,OAAI,CAAC1C,GAAG,8BAAsBH,EAAQwD,2BAG1C,UAAO,CAACX,UAAU,uCAChB,KAAE,UAAC,eACH,MAAG,CAACA,UAAU,6CACZ,MAAG,CAACA,UAAU,4BACZvD,EAAU+F,KAAKnF,IACd,GAAIF,EAAQV,UAAU2F,SAAS/E,EAAGC,IAChC,OAAMwC,EAAAC,KACH,MAAG,CAACC,UAAU,8BACZ,IAAC,CACA1C,GAAG,iBACHqE,QAAO,KACL1E,EAAQ,YAAaI,EAAGC,OAE1BuE,MAAO,CAAEY,OAAQ,oBAGhBpF,EAAGqB,MAFCrB,EAAGC,UAIT,IAAC,UAAED,EAAG4B,WAXyB5B,EAAGC,oBAkBhD,UAAO,CAAC0C,UAAU,4BAChBsC,EAAAlD,QAAmB,MAEN,SAAfzC,EAAO+F,KAAe5C,EAAA6C,IACpBJ,EAAAnD,QAAe,CACd5B,YAAaA,EACbC,eAAgBA,EAChBG,WAAYA,EACZC,cAAeA,EACfgB,YAAaA,EACbG,aAAcA,IAGhB,SA1JwBc,EAAA6C,IAC/B,MAAG,CAAC3C,UAAU,0BACZ,MAAG,CAACA,UAAU,0BA8JlBV,EAAAsD,eAAc,iGC1OrBC,YA9D0BrF,YACxBA,EAAWI,WACXA,EAAUH,eACVA,EAAcI,cACdA,EAAagB,YACbA,EAAWG,aACXA,IAEA,OAAIxB,EACIsC,EAAAC,KACH,MAAG,CAACC,UAAW,kCACb,SAAM,CAAC2B,QAAS9C,WAAa,iBAC7B,SAAM,CACL4C,KAAK,SACLE,QAAO,KACLlE,GAAe,aAElB,cAMHG,EACIkC,EAAAC,KACH,MAAG,CAACC,UAAW,kCACb,SAAM,CAACyB,KAAK,SAASE,QAAS3C,WAAc,kBAG5C,SAAM,CACLyC,KAAK,SACLE,QAAO,KACL9D,GAAc,aAEjB,cAMDiC,EAAAC,KACH,MAAG,CAACC,UAAW,kCACb,SAAM,CACLyB,KAAK,SACLE,QAAO,KACLlE,GAAe,aAElB,iBAGA,SAAM,CACLgE,KAAK,SACLE,QAAO,KACL9D,GAAc,aAEjB,wGCzBPiF,YA9B0BrG,UACxBA,EAAS0B,oBACTA,EAAmB+D,eACnBA,EAAcxD,KACdA,IAEA,OAAMoB,EAAAC,KACH,SAAM,CACLgD,SAAWhE,IACT,IAAIX,EAAU3B,EAAUW,MAAMC,GAAOA,EAAGqB,MAAQK,EAAEsB,OAAO1B,QACrDlC,EAAUW,MAAMC,GAAOA,EAAGqB,MAAQK,EAAEsB,OAAO1B,QAC3C,GACJR,EAAoBC,IAEtBsD,aAAcQ,EAAexD,KAC7BA,KAAMA,EACNsE,UAAQ,kBAEP,SAAM,CAACrE,MAAM,YAAG,qBAChBlC,EAAU+F,KAAKpE,GACR0B,EAAA6C,IACH,SAAM,CAAChE,MAAOP,EAAQM,cACpBN,EAAQM,MADuBN,EAAQd,8JCrBpD,MAAM2F,EAAiBC,IACrB,IAAIC,EAAW,GAQf,OAPKD,EAAaE,YAAWD,EAASC,UAAY,4BAC7CF,EAAa9E,UAAS+E,EAAS/E,QAAU,2BACzC8E,EAAatB,SAAQuB,EAASvB,OAAS,0BACvCsB,EAAaG,WAAUF,EAASE,SAAW,yBAChB,IAA5BH,EAAaI,aAAoD,IAA5BJ,EAAaI,aACpDH,EAASI,KAAO,+BAClBJ,EAASnC,KAAKK,OAAOC,KAAK6B,GAAUtG,OAAS,GACtCsG,GAEHK,EAAiBN,IACrB,IAAIC,EAAW,GAQf,OAPKD,EAAa9C,YAAW+C,EAAS/C,UAAY,4BAC7C8C,EAAa3C,WAAU4C,EAAS5C,SAAW,2BAC3C2C,EAAazG,YAAW0G,EAAS1G,UAAY,2BAC7CyG,EAAazC,QAAO0C,EAAS1C,MAAQ,yBACrCyC,EAAavC,cAChBwC,EAASxC,YAAc,+BACzBwC,EAASnC,KAAKK,OAAOC,KAAK6B,GAAUtG,OAAS,GACtCsG,GAGHM,EAAiBP,IACrB,IAAIC,EAAW,GAUf,OATKD,EAAaxE,OAAMyE,EAASzE,KAAO,uBACnCwE,EAAaQ,MAAKP,EAASO,IAAM,6BACjCR,EAAaS,OAAMR,EAASQ,KAAO,uBACnCT,EAAaU,SAAQT,EAASS,OAAS,yBACvCV,EAAaW,eAChBV,EAASU,aAAe,gCACrBX,EAAaY,UAASX,EAASW,QAAU,0BACzCZ,EAAajE,SAAQkE,EAASlE,OAAS,0BAC5CkE,EAASnC,KAAKK,OAAOC,KAAK6B,GAAUtG,OAAS,GACtCsG","sources":["src/components/contacts/Contact.jsx","src/components/contacts/ContactControls.jsx","src/components/reusables/CompanySelector.jsx","src/logic/formValidation.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport { useParams, useNavigate } from \"react-router-dom\";\r\nimport ContactControls from \"./ContactControls.jsx\";\r\nimport CompanySelector from \"../reusables/CompanySelector.jsx\";\r\nimport handleRequests from \"../../logic/handleRequests\";\r\nimport { contactVerify } from \"../../logic/formValidation\";\r\nimport ContactIllustration from \"../reusables/ContactIllustration.jsx\";\r\n\r\n// toaster\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\n// end toaster\r\n\r\nfunction Contact({ contacts, companies, setIsLoaded, isAuth }) {\r\n  const loaded = contacts.length > 0 ? true : false;\r\n  const params = useParams();\r\n  const navigate = useNavigate();\r\n  const contact = contacts.find((el) => el.id == params.contactId);\r\n  const [isModifying, setIsModifying] = useState(false);\r\n  const [isDeleting, setIsDeleting] = useState(false);\r\n  const [isFetching, setIsFetching] = useState(false);\r\n  const [selectorAmount, setSelectorAmount] = useState(\r\n    contact.companies.length\r\n  );\r\n  useEffect(() => {\r\n    if (!contact) navigate(\"/contacts\");\r\n  }, [contacts]);\r\n\r\n  const handleCompanyChange = (company) => {\r\n    return;\r\n  };\r\n  const getCompaniesArray = (nodeList) => {\r\n    let compArr = [];\r\n    for (let node of nodeList) {\r\n      compArr.push(\r\n        companies.find((company) => (company.name == node.value ? true : false))\r\n          .id\r\n      );\r\n    }\r\n    return [...new Set([...compArr])];\r\n  };\r\n  const submit = async (e) => {\r\n    e.preventDefault();\r\n    setIsFetching(true);\r\n    const formData = {\r\n      firstname: e.target.contactFirstname.value,\r\n      lastname: e.target.contactLastname.value,\r\n      companies: getCompaniesArray(e.target.company),\r\n      email: e.target.contactEmail.value,\r\n      phonenumber: e.target.contactPhonenumber.value,\r\n    };\r\n    let check = contactVerify(formData);\r\n    if (check.ok) {\r\n      const { status, message, dataPackage } = await handleRequests(\r\n        \"PUT\",\r\n        `https://csharpproject.somee.com/api/contact/${params.contactId}`,\r\n        isAuth.jwt,\r\n        formData\r\n      );\r\n      setIsLoaded(false);\r\n      setIsFetching(false);\r\n      if (status === 200) {\r\n        setTimeout(() => {\r\n          toast.success(message, {\r\n            position: toast.POSITION.BOTTOM_RIGHT,\r\n          });\r\n        }, 250);\r\n      } else {\r\n        setTimeout(() => {\r\n          toast.error(message, {\r\n            position: toast.POSITION.BOTTOM_RIGHT,\r\n          });\r\n        }, 250);\r\n      }\r\n    } else {\r\n      setIsFetching(false);\r\n      const issues = Object.keys(check);\r\n      setTimeout(() => {\r\n        for (let issue of issues) {\r\n          if (issue !== \"ok\") {\r\n            toast.error(check[issue], {\r\n              position: toast.POSITION.BOTTOM_RIGHT,\r\n            });\r\n          }\r\n        }\r\n      }, 250);\r\n    }\r\n  };\r\n  const handleModif = async (e) => {\r\n    return;\r\n  };\r\n  const handleDelete = async () => {\r\n    setIsFetching(true);\r\n    const { status, message } = await handleRequests(\r\n      \"DELETE\",\r\n      `https://csharpproject.somee.com/api/Contact/${contact.id}`,\r\n      isAuth.jwt\r\n    );\r\n    setIsFetching(false);\r\n    if (status !== 200) {\r\n      toast.error(\"There was an error deleting this contact\", {\r\n        position: toast.POSITION.BOTTOM_RIGHT,\r\n      });\r\n    }\r\n    sessionStorage.setItem(\"cogipToast\", \"Success !\");\r\n    setIsDeleting(false);\r\n    setIsLoaded(false);\r\n  };\r\n  const handleAddCompSelector = () => {\r\n    setSelectorAmount((amount) => amount + 1);\r\n  };\r\n  const handleRemoveCompSelector = () => {\r\n    setSelectorAmount((amount) => (amount > 1 ? amount - 1 : amount));\r\n  };\r\n  const renderSelector = (amount) => {\r\n    let selectorArray = [];\r\n    for (let x = 0; x < amount; x++) {\r\n      selectorArray.push(\r\n        <div className=\"contactGrid__section--child selectors\" key={x}>\r\n          <label>Company Selector : </label>\r\n          <CompanySelector\r\n            companies={companies}\r\n            currentCompany={\r\n              companies.filter((el) => contact.companies.includes(el.id))[x] ||\r\n              \"\"\r\n            }\r\n            handleCompanyChange={handleCompanyChange}\r\n            name={\"company\"}\r\n          />\r\n        </div>\r\n      );\r\n    }\r\n    return selectorArray;\r\n  };\r\n  return (\r\n    <main>\r\n      {isFetching || !loaded || !contact ? (\r\n        <div className=\"fetching\">\r\n          <div className=\"lds-dual-ring\"></div>\r\n        </div>\r\n      ) : (\r\n        <div className=\"card\">\r\n          <h2>Details :</h2>\r\n          {isModifying ? (\r\n            <form className=\"contactGrid\" onSubmit={submit}>\r\n              <fieldset className=\"contactGrid__section\">\r\n                <legend>Contact</legend>\r\n                <div className=\"contactGrid__section--child infos\">\r\n                  <label htmlFor=\"contactFirstname\" className=\"labels\">\r\n                    Firstname :{\" \"}\r\n                  </label>\r\n                  <input\r\n                    type=\"text\"\r\n                    id=\"contactFirstname\"\r\n                    name=\"contactFirstname\"\r\n                    defaultValue={contact.firstname}\r\n                  />\r\n                </div>\r\n                <div className=\"contactGrid__section--child infos\">\r\n                  <label htmlFor=\"contactLastname\" className=\"labels\">\r\n                    Lastname :{\" \"}\r\n                  </label>\r\n                  <input\r\n                    type=\"text\"\r\n                    id=\"contactLastname\"\r\n                    name=\"contactLastname\"\r\n                    defaultValue={contact.lastname}\r\n                  />\r\n                </div>\r\n                <div className=\"contactGrid__section--child infos\">\r\n                  <label htmlFor=\"contactEmail\" className=\"labels\">\r\n                    Email :{\" \"}\r\n                  </label>\r\n                  <input\r\n                    type=\"text\"\r\n                    id=\"contactEmail\"\r\n                    name=\"contactEmail\"\r\n                    defaultValue={contact.email}\r\n                  />\r\n                </div>\r\n                <div className=\"contactGrid__section--child infos\">\r\n                  <label htmlFor=\"contactPhonenumber\" className=\"labels\">\r\n                    Phone number :{\" \"}\r\n                  </label>\r\n                  <input\r\n                    type=\"text\"\r\n                    id=\"contactPhonenumber\"\r\n                    name=\"contactPhonenumber\"\r\n                    defaultValue={contact.phonenumber}\r\n                  />\r\n                </div>\r\n              </fieldset>\r\n\r\n              <fieldset className=\"contactGrid__section from\">\r\n                <legend>\r\n                  From\r\n                  <button\r\n                    type=\"button\"\r\n                    id=\"addCompanySelector\"\r\n                    onClick={handleAddCompSelector}\r\n                    style={{ padding: \"0 .5rem\" }}\r\n                  >\r\n                    +\r\n                  </button>\r\n                  <button\r\n                    type=\"button\"\r\n                    id=\"removeCompanySelector\"\r\n                    onClick={handleRemoveCompSelector}\r\n                    style={{ padding: \"0 .5rem\" }}\r\n                  >\r\n                    -\r\n                  </button>\r\n                </legend>\r\n                {renderSelector(selectorAmount)}\r\n              </fieldset>\r\n              <fieldset className=\"decoration\">\r\n                <ContactIllustration />\r\n              </fieldset>\r\n              <ContactControls\r\n                isModifying={isModifying}\r\n                setIsModifying={setIsModifying}\r\n                isDeleting={isDeleting}\r\n                setIsDeleting={setIsDeleting}\r\n                handleModif={handleModif}\r\n                handleDelete={handleDelete}\r\n              />\r\n            </form>\r\n          ) : (\r\n            <div className=\"contactGrid\">\r\n              <section className=\"contactGrid__section\">\r\n                <h3>Contact</h3>\r\n                <div className=\"contactGrid__section--child infos\">\r\n                  <span className=\"labels\">Firstname : </span>\r\n                  <span id=\"contactFirstname\" className=\"bigger\">\r\n                    {contact.firstname}\r\n                  </span>\r\n                </div>\r\n                <div className=\"contactGrid__section--child infos\">\r\n                  <span className=\"labels\">Lastname : </span>\r\n                  <span id=\"contactLastname\" className=\"bigger\">\r\n                    {contact.lastname}\r\n                  </span>\r\n                </div>\r\n                <div className=\"contactGrid__section--child infos\">\r\n                  <span className=\"labels\">Email : </span>\r\n                  <span id=\"contactEmail\">{contact.email}</span>\r\n                </div>\r\n                <div className=\"contactGrid__section--child infos\">\r\n                  <span className=\"labels\">Phone number : </span>\r\n                  <span id=\"contactPhonenumber\">{contact.phonenumber}</span>\r\n                </div>\r\n              </section>\r\n              <section className=\"contactGrid__section\">\r\n                <h3>From</h3>\r\n                <div className=\"contactGrid__section--child\">\r\n                  <div className=\"companyContainer\">\r\n                    {companies.map((el) => {\r\n                      if (contact.companies.includes(el.id))\r\n                        return (\r\n                          <div className=\"companyCard\" key={el.id}>\r\n                            <p\r\n                              id=\"contactCompany\"\r\n                              onClick={() => {\r\n                                navigate(`/company/${el.id}`);\r\n                              }}\r\n                              style={{ cursor: \"pointer\" }}\r\n                              key={el.id}\r\n                            >\r\n                              {el.name}\r\n                            </p>\r\n                            <p>{el.status}</p>\r\n                          </div>\r\n                        );\r\n                    })}\r\n                  </div>\r\n                </div>\r\n              </section>\r\n              <section className=\"decoration\">\r\n                <ContactIllustration />\r\n              </section>\r\n              {isAuth.role == \"Admin\" ? (\r\n                <ContactControls\r\n                  isModifying={isModifying}\r\n                  setIsModifying={setIsModifying}\r\n                  isDeleting={isDeleting}\r\n                  setIsDeleting={setIsDeleting}\r\n                  handleModif={handleModif}\r\n                  handleDelete={handleDelete}\r\n                />\r\n              ) : (\r\n                \"\"\r\n              )}\r\n            </div>\r\n          )}\r\n        </div>\r\n      )}\r\n      <ToastContainer />\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default Contact;\r\n","function ContactControls({\r\n  isModifying,\r\n  isDeleting,\r\n  setIsModifying,\r\n  setIsDeleting,\r\n  handleModif,\r\n  handleDelete,\r\n}) {\r\n  if (isModifying) {\r\n    return (\r\n      <div className={\"contactControls\"}>\r\n        <button onClick={handleModif}>Submit</button>\r\n        <button\r\n          type=\"button\"\r\n          onClick={() => {\r\n            setIsModifying(false);\r\n          }}\r\n        >\r\n          Cancel\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n  if (isDeleting) {\r\n    return (\r\n      <div className={\"contactControls\"}>\r\n        <button type=\"button\" onClick={handleDelete}>\r\n          Confirm\r\n        </button>\r\n        <button\r\n          type=\"button\"\r\n          onClick={() => {\r\n            setIsDeleting(false);\r\n          }}\r\n        >\r\n          Cancel\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n  return (\r\n    <div className={\"contactControls\"}>\r\n      <button\r\n        type=\"button\"\r\n        onClick={() => {\r\n          setIsModifying(true);\r\n        }}\r\n      >\r\n        Modify\r\n      </button>\r\n      <button\r\n        type=\"button\"\r\n        onClick={() => {\r\n          setIsDeleting(true);\r\n        }}\r\n      >\r\n        Delete\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ContactControls;\r\n","function CompanySelector({\r\n  companies,\r\n  handleCompanyChange,\r\n  currentCompany,\r\n  name,\r\n}) {\r\n  return (\r\n    <select\r\n      onChange={(e) => {\r\n        let company = companies.find((el) => el.name == e.target.value)\r\n          ? companies.find((el) => el.name == e.target.value)\r\n          : \"\";\r\n        handleCompanyChange(company);\r\n      }}\r\n      defaultValue={currentCompany.name}\r\n      name={name}\r\n      required\r\n    >\r\n      <option value=\"\">Select a company</option>\r\n      {companies.map((company) => {\r\n        return (\r\n          <option value={company.name} key={company.id}>\r\n            {company.name}\r\n          </option>\r\n        );\r\n      })}\r\n    </select>\r\n  );\r\n}\r\n\r\nexport default CompanySelector;\r\n","const invoiceVerify = (dataToVerify) => {\r\n  let response = {};\r\n  if (!dataToVerify.reference) response.reference = \"Please enter a reference\";\r\n  if (!dataToVerify.company) response.company = \"Please select a company\";\r\n  if (!dataToVerify.amount) response.amount = \"Please enter an amount\";\r\n  if (!dataToVerify.received) response.received = \"Please select a date\";\r\n  if (dataToVerify.paidStatus !== false && dataToVerify.paidStatus !== true)\r\n    response.paid = \"Please select a paid status\";\r\n  response.ok = Object.keys(response).length > 0 ? false : true;\r\n  return response;\r\n};\r\nconst contactVerify = (dataToVerify) => {\r\n  let response = {};\r\n  if (!dataToVerify.firstname) response.firstname = \"Please enter a firstname\";\r\n  if (!dataToVerify.lastname) response.lastname = \"Please enter a lastname\";\r\n  if (!dataToVerify.companies) response.companies = \"Please select a contact\";\r\n  if (!dataToVerify.email) response.email = \"Please enter an email\";\r\n  if (!dataToVerify.phonenumber)\r\n    response.phonenumber = \"Please enter a phone number\";\r\n  response.ok = Object.keys(response).length > 0 ? false : true;\r\n  return response;\r\n};\r\n\r\nconst companyVerify = (dataToVerify) => {\r\n  let response = {};\r\n  if (!dataToVerify.name) response.name = \"Please enter a name\";\r\n  if (!dataToVerify.vat) response.vat = \"Please enter a vat number\";\r\n  if (!dataToVerify.town) response.town = \"Please enter a town\";\r\n  if (!dataToVerify.street) response.street = \"Please enter a street\";\r\n  if (!dataToVerify.streetnumber)\r\n    response.streetnumber = \"Please enter a street number\";\r\n  if (!dataToVerify.country) response.country = \"Please enter a country\";\r\n  if (!dataToVerify.status) response.status = \"Please select a status\";\r\n  response.ok = Object.keys(response).length > 0 ? false : true;\r\n  return response;\r\n};\r\n\r\nexport { invoiceVerify, contactVerify, companyVerify };\r\n"],"names":["$b8b37f0a6f9246e4$export$2e2bcd8739ae039","contacts","companies","setIsLoaded","isAuth","loaded","length","params","$kYfAi","useParams","navigate","useNavigate","contact","find","el","id","contactId","isModifying","setIsModifying","$eCRxs","useState","isDeleting","setIsDeleting","isFetching","setIsFetching","selectorAmount","setSelectorAmount","useEffect","handleCompanyChange","company","getCompaniesArray","nodeList","compArr","node","push","name","value","Set","handleModif","async","e","handleDelete","status","message","$9aCo1","default","jwt","$dv2Dk","toast","error","position","POSITION","BOTTOM_RIGHT","sessionStorage","setItem","$7C6UD","jsxs","className","onSubmit","preventDefault","formData","firstname","target","contactFirstname","lastname","contactLastname","email","contactEmail","phonenumber","contactPhonenumber","check","$5H5kc","contactVerify","ok","dataPackage","setTimeout","success","issues","Object","keys","issue","htmlFor","type","defaultValue","onClick","amount","style","padding","selectorArray","x","$4yknE","currentCompany","filter","includes","renderSelector","$3Ui4D","$9jFXu","map","cursor","role","jsx","ToastContainer","$5ed51abd9418945a$export$2e2bcd8739ae039","$27c888b5041dae3c$export$2e2bcd8739ae039","onChange","required","$42551951195d288c$export$7e6a64f84fea9213","dataToVerify","response","reference","received","paidStatus","paid","$42551951195d288c$export$9204046200024146","$42551951195d288c$export$927967c6383eee08","vat","town","street","streetnumber","country"],"version":3,"file":"Contact.2e4f2674.js.map"}