{"mappings":"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","sources":["src/components/invoices/Invoice.jsx","src/components/invoices/InvoiceControls.jsx","src/components/reusables/CompanySelector.jsx","src/logic/formValidation.js","src/logic/dateFormatter.js"],"sourcesContent":["import { useState, useRef, useEffect } from \"react\";\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport InvoiceControls from \"./InvoiceControls.jsx\";\nimport CompanySelector from \"../reusables/CompanySelector.jsx\";\nimport ContactSelector from \"../reusables/ContactSelector.jsx\";\nimport handleRequests from \"../../logic/handleRequests\";\nimport { invoiceVerify } from \"../../logic/formValidation.js\";\nimport { dateFormatter } from \"../../logic/dateFormatter\";\nimport InvoiceIllustration from \"../reusables/InvoiceIllustration.jsx\";\n\n// toaster\nimport { ToastContainer, toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\n// end toaster\n\nfunction Invoice({ invoices, companies, contacts, setIsLoaded, isAuth }) {\n  let params = useParams();\n  const navigate = useNavigate();\n  const loaded = invoices.length > 0 ? true : false;\n  const invoice = invoices.find((el) => el.id == params.invoiceId);\n  const company = invoice\n    ? companies.find((el) => el.id == invoice.company)\n    : null;\n  const contact = invoice\n    ? invoice.contact !== \"\"\n      ? contacts.find((el) => el.id == invoice.contact)\n      : \"\"\n    : \"\";\n  let year = invoice ? invoice.received.slice(0, 4) : null;\n  let month = invoice ? invoice.received.slice(5, 7) : null;\n  let day = invoice ? invoice.received.slice(8, 10) : null;\n\n  const [isModifying, setIsModifying] = useState(false);\n  const [isDeleting, setIsDeleting] = useState(false);\n  const [selectedCompany, setSelectedCompany] = useState(company);\n  const [selectedContact, setSelectedContact] = useState(contact);\n  const [isFetching, setIsFetching] = useState(false);\n  const [newDue, setNewDue] = useState(null);\n\n  useEffect(() => {\n    if (!invoice) navigate(\"/invoices\");\n  }, [invoices]);\n  const handleContactChange = (value) => {\n    setSelectedContact(value);\n  };\n  const handleCompanyChange = (value) => {\n    setSelectedCompany(value);\n  };\n\n  const amountRef = useRef();\n  const receivedRef = useRef();\n  const paidRef = useRef();\n  const dueRef = useRef();\n  const dueDateRef = useRef();\n  //. Submitting modification function.\n  const submit = async (e) => {\n    const formData = {\n      reference: e.target.reference.value,\n      amount: e.target.amount.value,\n      company: selectedCompany.id.toString(),\n      contact:\n        e.target.contact.value === \"\"\n          ? 0\n          : contacts.find(\n              (el) => `${el.firstname} ${el.lastname}` == e.target.contact.value\n            ),\n      received: receivedRef.current.value,\n      paidStatus:\n        amountRef.current.value - paidRef.current.value === 0 ? true : false,\n      paid: paidRef.current.value,\n      due: dueRef.current.textContent.slice(0, -1),\n      dueDate: dueDateRef.current.value,\n    };\n    console.log(formData);\n    let check = invoiceVerify(formData);\n    setIsFetching(true);\n    if (check.ok) {\n      const { status, message, dataPackage } = await handleRequests(\n        \"PUT\",\n        `https://csharpproject.somee.com/api/invoice/${params.invoiceId}`,\n        isAuth.jwt,\n        formData\n      );\n      setIsLoaded(false);\n      setIsFetching(false);\n      if (status === 200) {\n        setTimeout(() => {\n          toast.success(message, {\n            position: toast.POSITION.BOTTOM_RIGHT,\n          });\n        }, 250);\n      } else {\n        setTimeout(() => {\n          toast.error(message, {\n            position: toast.POSITION.BOTTOM_RIGHT,\n          });\n        }, 250);\n      }\n    } else {\n      setIsFetching(false);\n      const issues = Object.keys(check);\n      setTimeout(() => {\n        for (let issue of issues) {\n          if (issue !== \"ok\") {\n            toast.error(check[issue], {\n              position: toast.POSITION.BOTTOM_RIGHT,\n            });\n          }\n        }\n      }, 250);\n    }\n  };\n  const handleModif = async () => {\n    return;\n  };\n  const handleDelete = async () => {\n    setIsFetching(true);\n    const { status, message } = await handleRequests(\n      \"DELETE\",\n      `https://csharpproject.somee.com/api/Invoice/${invoice.id}`,\n      isAuth.jwt\n    );\n    setIsFetching(false);\n    if (status !== 200) {\n      toast.error(\"There was an error deleting this invoice\", {\n        position: toast.POSITION.BOTTOM_RIGHT,\n      });\n    }\n    sessionStorage.setItem(\"cogipToast\", \"Success !\");\n    setIsDeleting(false);\n    setIsLoaded(false);\n  };\n  const handleAmountChange = (e) => {\n    if (e.target.value < paidRef.current.value)\n      paidRef.current.value = e.target.value;\n    setNewDue(parseInt(e.target.value) - parseInt(paidRef.current.value));\n  };\n  const handlePaidChange = (e) => {\n    if (parseInt(amountRef.current.value) < parseInt(e.target.value)) {\n      e.target.value = amountRef.current.value;\n    }\n    setNewDue(parseInt(amountRef.current.value) - parseInt(e.target.value));\n  };\n  useEffect(() => {\n    setNewDue(null);\n  }, [isDeleting, isModifying]);\n  return (\n    <main>\n      {isFetching || !loaded || !invoice ? (\n        <div className=\"fetching\">\n          <div className=\"lds-dual-ring\"></div>\n        </div>\n      ) : (\n        <div className=\"card\">\n          <h2>\n            {company.status === \"Supplier\"\n              ? \"Incoming bill \"\n              : \"Outgoing bill \"}\n            details\n          </h2>\n\n          {isModifying ? (\n            <form className=\"invoiceGrid\" onSubmit={submit} method=\"post\">\n              <fieldset className=\"invoiceGrid__section--ref\">\n                <div>\n                  <label htmlFor=\"reference\" className=\"labels\">\n                    Reference :{\" \"}\n                  </label>\n                  <input\n                    type=\"text\"\n                    name=\"reference\"\n                    id=\"reference\"\n                    defaultValue={invoice.reference}\n                    required\n                  />\n                </div>\n                <div>\n                  <label htmlFor=\"date\" className=\"labels\">\n                    Date :{\" \"}\n                  </label>\n                  <input\n                    type=\"date\"\n                    name=\"date\"\n                    id=\"date\"\n                    ref={receivedRef}\n                    defaultValue={`${year}-${month}-${day}`}\n                    required\n                  />\n                </div>\n                <div>\n                  <label htmlFor=\"dueDate\" className=\"labels\">\n                    Due date :{\" \"}\n                  </label>\n                  <input\n                    type=\"date\"\n                    name=\"dueDate\"\n                    id=\"dueDate\"\n                    ref={dueDateRef}\n                    defaultValue={`${invoice.dueDate.slice(\n                      0,\n                      4\n                    )}-${invoice.dueDate.slice(5, 7)}-${invoice.dueDate.slice(\n                      8,\n                      10\n                    )}`}\n                    required\n                  />\n                </div>\n              </fieldset>\n              <div className=\"lowerBlock\">\n                <fieldset className=\"invoiceGrid__section--relations\">\n                  <legend>Company : </legend>\n                  <div className=\"company\">\n                    <CompanySelector\n                      companies={companies}\n                      handleCompanyChange={handleCompanyChange}\n                      currentCompany={company}\n                      className=\"company__value\"\n                    />\n                  </div>\n                  <div>\n                    <span className=\"labels\">Contact : </span>\n                    <ContactSelector\n                      contacts={contacts}\n                      currentContact={contact}\n                      currentCompany={company}\n                      selectedCompany={selectedCompany}\n                      handleContactChange={handleContactChange}\n                    />\n                  </div>\n                </fieldset>\n                <fieldset className=\"invoiceGrid__section--payment\">\n                  <legend>Total : </legend>\n                  <div className=\"total\">\n                    <input\n                      type=\"number\"\n                      name=\"amount\"\n                      ref={amountRef}\n                      id=\"amount\"\n                      defaultValue={invoice.amount}\n                      className=\"total__value\"\n                      onChange={handleAmountChange}\n                      required\n                    />\n                  </div>\n                  <div>\n                    <label htmlFor=\"paid\" className=\"labels\">\n                      Paid :{\" \"}\n                    </label>\n                    <input\n                      type=\"text\"\n                      name=\"paid\"\n                      id=\"paid\"\n                      defaultValue={invoice.paid}\n                      ref={paidRef}\n                      onChange={handlePaidChange}\n                    />\n                  </div>\n                  <div>\n                    <span className=\"labels\">Due : </span>\n                    <span ref={dueRef}>\n                      {newDue !== null ? newDue : invoice.due}€\n                    </span>\n                  </div>\n                  <div>\n                    <span className=\"labels\">Paid status : </span>\n                    <span>{invoice.paidStatus ? \"Paid\" : \"To be paid\"}</span>\n                  </div>\n                </fieldset>\n                <section className=\"decoration\">\n                  <InvoiceIllustration />\n                </section>\n              </div>\n              <InvoiceControls\n                invoice={invoice.id}\n                isModifying={isModifying}\n                setIsModifying={setIsModifying}\n                isDeleting={isDeleting}\n                setIsDeleting={setIsDeleting}\n                originalCompany={company}\n                setSelectedCompany={setSelectedCompany}\n                originalContact={contact}\n                setSelectedContact={setSelectedContact}\n                handleModif={handleModif}\n                handleDelete={handleDelete}\n              />\n            </form>\n          ) : (\n            <div className=\"invoiceGrid\">\n              <section className=\"invoiceGrid__section--ref\">\n                <div>\n                  <span className=\"labels\">Reference : </span>\n                  <span id=\"invoiceReference\">{invoice.reference}</span>\n                </div>\n                <div>\n                  <span className=\"labels\">Date : </span>\n                  <span id=\"invoiceReceived\">{`${day}-${month}-${year}`}</span>\n                </div>\n                <div>\n                  <span className=\"labels\">Due date : </span>\n                  <span>{dateFormatter(invoice.dueDate)}</span>\n                </div>\n              </section>\n              <div className=\"lowerBlock\">\n                <section className=\"invoiceGrid__section--relations\">\n                  <h3>Company : </h3>\n                  <div className=\"company\">\n                    <span\n                      id=\"invoiceCompany\"\n                      onClick={() => {\n                        navigate(`/company/${company.id}`);\n                      }}\n                      style={{ cursor: \"pointer\" }}\n                      className=\"company__value\"\n                    >\n                      {company.name}\n                    </span>\n                  </div>\n                  <div>\n                    <span className=\"labels\">Contact : </span>\n                    {contact ? (\n                      <span\n                        id=\"invoiceContact\"\n                        onClick={() => {\n                          navigate(`/contact/${contact.id}`);\n                        }}\n                        style={{ cursor: \"pointer\" }}\n                      >{`${contact.firstname} ${contact.lastname}`}</span>\n                    ) : (\n                      <span>None</span>\n                    )}\n                  </div>\n                </section>\n                <section className=\"invoiceGrid__section--payment\">\n                  <h3>Total : </h3>\n                  <div className=\"total\">\n                    <span id=\"invoiceAmout\" className=\"total__value\">\n                      {invoice.amount} €\n                    </span>\n                  </div>\n                  <div>\n                    <span className=\"labels\">Paid : </span>\n                    <span>{invoice.paid}€</span>\n                  </div>\n                  <div>\n                    <span className=\"labels\">Due : </span>\n                    <span>{invoice.due}€</span>\n                  </div>\n                  <div>\n                    <span className=\"labels\">Paid status : </span>\n                    <span>{invoice.paidStatus ? \"Paid\" : \"To be paid\"}</span>\n                  </div>\n                </section>\n                <section className=\"decoration\">\n                  <InvoiceIllustration />\n                </section>\n              </div>\n              {isAuth.role == \"Admin\" ? (\n                <InvoiceControls\n                  invoice={invoice.id}\n                  isModifying={isModifying}\n                  setIsModifying={setIsModifying}\n                  isDeleting={isDeleting}\n                  setIsDeleting={setIsDeleting}\n                  originalCompany={company}\n                  setSelectedCompany={setSelectedCompany}\n                  originalContact={contact}\n                  setSelectedContact={setSelectedContact}\n                  handleModif={handleModif}\n                  handleDelete={handleDelete}\n                />\n              ) : (\n                \"\"\n              )}\n            </div>\n          )}\n        </div>\n      )}\n      <ToastContainer />\n    </main>\n  );\n}\n\nexport default Invoice;\n","function InvoiceControls({\n  isModifying,\n  setIsModifying,\n  setSelectedCompany,\n  originalCompany,\n  isDeleting,\n  setIsDeleting,\n  originalContact,\n  setSelectedContact,\n  handleModif,\n  handleDelete,\n}) {\n  if (isModifying) {\n    return (\n      <div className={\"invoiceControls\"}>\n        <button onClick={handleModif}>Submit</button>\n        <button\n          type=\"button\"\n          onClick={() => {\n            setIsModifying(false);\n            setSelectedCompany(originalCompany);\n            setSelectedContact(originalContact);\n          }}\n        >\n          Cancel\n        </button>\n      </div>\n    );\n  }\n  if (isDeleting) {\n    return (\n      <div className={\"invoiceControls\"}>\n        <button type=\"button\" onClick={handleDelete}>\n          Confirm\n        </button>\n        <button\n          type=\"button\"\n          onClick={() => {\n            setIsDeleting(false);\n          }}\n        >\n          Cancel\n        </button>\n      </div>\n    );\n  }\n  return (\n    <div className={\"invoiceControls\"}>\n      <button\n        type=\"button\"\n        onClick={() => {\n          setIsModifying(true);\n        }}\n      >\n        Modify\n      </button>\n      <button\n        type=\"button\"\n        onClick={() => {\n          setIsDeleting(true);\n        }}\n      >\n        Delete\n      </button>\n    </div>\n  );\n}\n\nexport default InvoiceControls;\n","function CompanySelector({\n  companies,\n  handleCompanyChange,\n  currentCompany,\n  name,\n}) {\n  return (\n    <select\n      onChange={(e) => {\n        let company = companies.find((el) => el.name == e.target.value)\n          ? companies.find((el) => el.name == e.target.value)\n          : \"\";\n        handleCompanyChange(company);\n      }}\n      defaultValue={currentCompany.name}\n      name={name}\n      required\n    >\n      <option value=\"\">Select a company</option>\n      {companies.map((company) => {\n        return (\n          <option value={company.name} key={company.id}>\n            {company.name}\n          </option>\n        );\n      })}\n    </select>\n  );\n}\n\nexport default CompanySelector;\n","const invoiceVerify = (dataToVerify) => {\n  let response = {};\n  if (!dataToVerify.reference) response.reference = \"Please enter a reference\";\n  if (!dataToVerify.company) response.company = \"Please select a company\";\n  if (!dataToVerify.amount) response.amount = \"Please enter an amount\";\n  if (!dataToVerify.received) response.received = \"Please select a date\";\n  if (dataToVerify.paidStatus !== false && dataToVerify.paidStatus !== true)\n    response.paid = \"Please select a paid status\";\n  response.ok = Object.keys(response).length > 0 ? false : true;\n  return response;\n};\nconst contactVerify = (dataToVerify) => {\n  let response = {};\n  if (!dataToVerify.firstname) response.firstname = \"Please enter a firstname\";\n  if (!dataToVerify.lastname) response.lastname = \"Please enter a lastname\";\n  if (!dataToVerify.companies) response.companies = \"Please select a contact\";\n  if (!dataToVerify.email) response.email = \"Please enter an email\";\n  if (!dataToVerify.phonenumber)\n    response.phonenumber = \"Please enter a phone number\";\n  response.ok = Object.keys(response).length > 0 ? false : true;\n  return response;\n};\n\nconst companyVerify = (dataToVerify) => {\n  let response = {};\n  if (!dataToVerify.name) response.name = \"Please enter a name\";\n  if (!dataToVerify.vat) response.vat = \"Please enter a vat number\";\n  if (!dataToVerify.town) response.town = \"Please enter a town\";\n  if (!dataToVerify.street) response.street = \"Please enter a street\";\n  if (!dataToVerify.streetnumber)\n    response.streetnumber = \"Please enter a street number\";\n  if (!dataToVerify.country) response.country = \"Please enter a country\";\n  if (!dataToVerify.status) response.status = \"Please select a status\";\n  response.ok = Object.keys(response).length > 0 ? false : true;\n  return response;\n};\n\nexport { invoiceVerify, contactVerify, companyVerify };\n","const dateFormatter = (dateInput) => {\n  const dateOutput = `${dateInput.slice(8, 10)}-${dateInput.slice(\n    5,\n    7\n  )}-${dateInput.slice(0, 4)}`;\n  return dateOutput;\n};\nexport { dateFormatter };\n"],"names":["$1ec4156a7929aedf$export$2e2bcd8739ae039","invoices","companies","contacts","setIsLoaded","isAuth","params","$kYfAi","useParams","navigate","useNavigate","loaded","length","invoice","find","el","id","invoiceId","company","contact","year","received","slice","month","day","isModifying","setIsModifying","$eCRxs","useState","isDeleting","setIsDeleting","selectedCompany","setSelectedCompany","selectedContact","setSelectedContact","isFetching","setIsFetching","newDue","setNewDue","useEffect","amountRef","useRef","receivedRef","paidRef","dueRef","dueDateRef","handleModif","async","handleDelete","status","message","$9aCo1","default","jwt","$dv2Dk","toast","error","position","POSITION","BOTTOM_RIGHT","sessionStorage","setItem","$7C6UD","jsxs","className","onSubmit","e","formData","reference","target","value","amount","toString","firstname","lastname","current","paidStatus","paid","due","textContent","dueDate","console","log","check","$5H5kc","invoiceVerify","ok","dataPackage","setTimeout","success","issues","Object","keys","issue","method","htmlFor","type","name","defaultValue","required","ref","$4yknE","handleCompanyChange","currentCompany","$eltSV","currentContact","handleContactChange","onChange","parseInt","$lb0XH","$enOpT","originalCompany","originalContact","$gXTmb","dateFormatter","onClick","style","cursor","jsx","role","ToastContainer","$e497f1a838d958a9$export$2e2bcd8739ae039","$27c888b5041dae3c$export$2e2bcd8739ae039","map","$42551951195d288c$export$7e6a64f84fea9213","dataToVerify","response","$42551951195d288c$export$9204046200024146","email","phonenumber","$42551951195d288c$export$927967c6383eee08","vat","town","street","streetnumber","country","$c59d18b9d58e05d0$export$406508d2ca449bd","dateInput"],"version":3,"file":"Invoice.5aaa1bed.js.map"}