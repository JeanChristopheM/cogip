{"mappings":"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","sources":["src/components/invoices/Invoice.jsx","src/components/invoices/InvoiceControls.jsx","src/components/reusables/CompanySelector.jsx","src/components/reusables/ContactSelector.jsx","src/logic/formValidation.js"],"sourcesContent":["import { useState, useRef, useEffect } from \"react\";\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport InvoiceControls from \"./InvoiceControls.jsx\";\nimport CompanySelector from \"../reusables/CompanySelector.jsx\";\nimport ContactSelector from \"../reusables/ContactSelector.jsx\";\nimport handleRequests from \"../../logic/handleRequests\";\nimport { invoiceVerify } from \"../../logic/formValidation.js\";\n\n// toaster\nimport { ToastContainer, toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\n// end toaster\n\nfunction Invoice({ invoices, companies, contacts, setIsLoaded, isAuth }) {\n  const loaded = invoices.length > 0 ? true : false;\n  let params = useParams();\n  const navigate = useNavigate();\n  const invoice = invoices.find((el) => el.id == params.invoiceId);\n  const company = invoice\n    ? companies.find((el) => el.id == invoice.company)\n    : null;\n  const contact = invoice\n    ? contacts.find((el) => el.id == invoice.contact)\n    : null;\n  let year = invoice ? invoice.received.slice(0, 4) : null;\n  let month = invoice ? invoice.received.slice(5, 7) : null;\n  let day = invoice ? invoice.received.slice(8, 10) : null;\n\n  const [isModifying, setIsModifying] = useState(false);\n  const [isDeleting, setIsDeleting] = useState(false);\n  const [selectedCompany, setSelectedCompany] = useState(company);\n  const [selectedContact, setSelectedContact] = useState(contact);\n  const [isFetching, setIsFetching] = useState(false);\n\n  useEffect(() => {\n    if (!invoice) navigate(\"/invoices\");\n  }, [invoices]);\n  const handleContactChange = (value) => {\n    setSelectedContact(\n      contacts.find((el) => `${el.firstname} ${el.lastname}` == value)\n    );\n  };\n  const handleCompanyChange = (value) => {\n    setSelectedCompany(value);\n  };\n  const referenceRef = useRef();\n  const amountRef = useRef();\n  const receivedRef = useRef();\n  const paidRef = useRef();\n\n  const handleModif = async () => {\n    const formData = {\n      reference: referenceRef.current.value,\n      amount: amountRef.current.value,\n      company: selectedCompany.id.toString(),\n      contact: contacts\n        .find((el) => el.name == selectedContact.name)\n        .id.toString(),\n      received: receivedRef.current.value,\n      paid: paidRef.current.checked,\n    };\n    let check = invoiceVerify(formData);\n    setIsFetching(true);\n    if (check.ok) {\n      const { status, message, dataPackage } = await handleRequests(\n        \"PUT\",\n        `https://csharpproject.somee.com/api/invoice/${params.invoiceId}`,\n        isAuth.jwt,\n        formData\n      );\n      setIsLoaded(false);\n      setIsFetching(false);\n      if (status === 200) {\n        setTimeout(() => {\n          toast.success(message, {\n            position: toast.POSITION.BOTTOM_RIGHT,\n          });\n        }, 250);\n      } else {\n        setTimeout(() => {\n          toast.error(message, {\n            position: toast.POSITION.BOTTOM_RIGHT,\n          });\n        }, 250);\n      }\n    } else {\n      setIsFetching(false);\n      const issues = Object.keys(check);\n      setTimeout(() => {\n        for (let issue of issues) {\n          if (issue !== \"ok\") {\n            toast.error(check[issue], {\n              position: toast.POSITION.BOTTOM_RIGHT,\n            });\n          }\n        }\n      }, 250);\n    }\n  };\n  const handleDelete = async () => {\n    setIsFetching(true);\n    const { status, message } = await handleRequests(\n      \"DELETE\",\n      `https://csharpproject.somee.com/api/Invoice/${invoice.id}`,\n      isAuth.jwt\n    );\n    setIsFetching(false);\n    if (status !== 200) {\n      toast.error(\"There was an error deleting this invoice\", {\n        position: toast.POSITION.BOTTOM_RIGHT,\n      });\n    }\n    sessionStorage.setItem(\"cogipToast\", \"Success !\");\n    setIsDeleting(false);\n    setIsLoaded(false);\n  };\n  return (\n    <main>\n      {isFetching || !loaded || !invoice ? (\n        <div className=\"fetching\">\n          <div className=\"lds-dual-ring\"></div>\n        </div>\n      ) : (\n        <div className=\"card\">\n          <h2>Details about invoice {invoice.reference}</h2>\n          <div className=\"invoiceGrid\">\n            <span>Reference : </span>\n            {isModifying ? (\n              <input\n                type=\"text\"\n                name=\"reference\"\n                ref={referenceRef}\n                defaultValue={invoice.reference}\n                required\n              />\n            ) : (\n              <span id=\"invoiceReference\">{invoice.reference}</span>\n            )}\n\n            <span>Amount : </span>\n            {isModifying ? (\n              <input\n                type=\"number\"\n                name=\"amount\"\n                ref={amountRef}\n                defaultValue={invoice.amount}\n                required\n              />\n            ) : (\n              <span id=\"invoiceAmout\">{invoice.amount} €</span>\n            )}\n\n            <span>Company : </span>\n            {isModifying ? (\n              <CompanySelector\n                companies={companies}\n                handleCompanyChange={handleCompanyChange}\n                currentCompany={company}\n              />\n            ) : (\n              <span\n                id=\"invoiceCompany\"\n                onClick={() => {\n                  navigate(`/company/${company.id}`);\n                }}\n                style={{ cursor: \"pointer\" }}\n              >\n                {company.name}\n              </span>\n            )}\n\n            <span>Contact : </span>\n            {isModifying ? (\n              <ContactSelector\n                contacts={contacts}\n                currentContact={contact}\n                currentCompany={company}\n                selectedCompany={selectedCompany}\n                handleContactChange={handleContactChange}\n              />\n            ) : (\n              <span\n                id=\"invoiceContact\"\n                onClick={() => {\n                  navigate(`/contact/${contact.id}`);\n                }}\n                style={{ cursor: \"pointer\" }}\n              >{`${contact.firstname} ${contact.lastname}`}</span>\n            )}\n\n            <span>Date : </span>\n            {isModifying ? (\n              <input\n                type=\"date\"\n                name=\"date\"\n                ref={receivedRef}\n                defaultValue={`${year}-${month}-${day}`}\n                required\n              />\n            ) : (\n              <span id=\"invoiceReceived\">{`${day}-${month}-${year}`}</span>\n            )}\n            <span>Paid status : </span>\n            {isModifying ? (\n              <label htmlFor=\"paid\" className=\"switchToggle\">\n                {invoice.paid ? (\n                  <input\n                    type=\"checkbox\"\n                    name=\"paid\"\n                    id=\"paid\"\n                    className=\"switchCheck\"\n                    ref={paidRef}\n                    defaultChecked\n                  />\n                ) : (\n                  <input\n                    type=\"checkbox\"\n                    name=\"paid\"\n                    id=\"paid\"\n                    className=\"switchCheck\"\n                    ref={paidRef}\n                  />\n                )}\n                <span className=\"slider\"></span>\n              </label>\n            ) : (\n              <span>{invoice.paid ? \"Paid\" : \"To be paid\"}</span>\n            )}\n          </div>\n          {isAuth.role == \"Admin\" ? (\n            <InvoiceControls\n              invoice={invoice.id}\n              isModifying={isModifying}\n              setIsModifying={setIsModifying}\n              isDeleting={isDeleting}\n              setIsDeleting={setIsDeleting}\n              originalCompany={company}\n              setSelectedCompany={setSelectedCompany}\n              originalContact={contact}\n              setSelectedContact={setSelectedContact}\n              handleModif={handleModif}\n              handleDelete={handleDelete}\n            />\n          ) : (\n            \"\"\n          )}\n        </div>\n      )}\n      <ToastContainer />\n    </main>\n  );\n}\n\nexport default Invoice;\n","function InvoiceControls({\n  isModifying,\n  setIsModifying,\n  setSelectedCompany,\n  originalCompany,\n  isDeleting,\n  setIsDeleting,\n  originalContact,\n  setSelectedContact,\n  handleModif,\n  handleDelete,\n}) {\n  if (isModifying) {\n    return (\n      <div className={\"invoiceControls\"}>\n        <button type=\"button\" onClick={handleModif}>\n          Submit\n        </button>\n        <button\n          type=\"button\"\n          onClick={() => {\n            setIsModifying(false);\n            setSelectedCompany(originalCompany);\n            setSelectedContact(originalContact);\n          }}\n        >\n          Cancel\n        </button>\n      </div>\n    );\n  }\n  if (isDeleting) {\n    return (\n      <div className={\"invoiceControls\"}>\n        <button type=\"button\" onClick={handleDelete}>\n          Confirm\n        </button>\n        <button\n          type=\"button\"\n          onClick={() => {\n            setIsDeleting(false);\n          }}\n        >\n          Cancel\n        </button>\n      </div>\n    );\n  }\n  return (\n    <div className={\"invoiceControls\"}>\n      <button\n        type=\"button\"\n        onClick={() => {\n          setIsModifying(true);\n        }}\n      >\n        Modify\n      </button>\n      <button\n        type=\"button\"\n        onClick={() => {\n          setIsDeleting(true);\n        }}\n      >\n        Delete\n      </button>\n    </div>\n  );\n}\n\nexport default InvoiceControls;\n","function CompanySelector({\n  companies,\n  handleCompanyChange,\n  currentCompany,\n  name,\n}) {\n  return (\n    <select\n      onChange={(e) => {\n        let company = companies.find((el) => el.name == e.target.value)\n          ? companies.find((el) => el.name == e.target.value)\n          : \"\";\n        handleCompanyChange(company);\n      }}\n      defaultValue={currentCompany.name}\n      name={name}\n      required\n    >\n      <option value=\"\">Select a company</option>\n      {companies.map((company) => {\n        return (\n          <option value={company.name} key={company.id}>\n            {company.name}\n          </option>\n        );\n      })}\n    </select>\n  );\n}\n\nexport default CompanySelector;\n","function ContactSelector({\n  contacts,\n  selectedCompany,\n  currentContact,\n  handleContactChange,\n}) {\n  return (\n    <select\n      onChange={(e) => {\n        handleContactChange(e.target.value);\n      }}\n      defaultValue={`${currentContact.firstname} ${currentContact.lastname}`}\n      required\n    >\n      <option value=\"\">\n        {selectedCompany == \"\" ? \"Select a company first\" : \"Select a contact\"}\n      </option>\n      {contacts.map((contact) => {\n        if (selectedCompany == \"\") {\n          return;\n        } else if (selectedCompany.id == contact.contactcompany) {\n          return (\n            <option\n              value={`${contact.firstname} ${contact.lastname}`}\n              key={contact.id}\n            >\n              {`${contact.firstname} ${contact.lastname}`}\n            </option>\n          );\n        }\n      })}\n    </select>\n  );\n}\n\nexport default ContactSelector;\n","const invoiceVerify = (dataToVerify) => {\n  let response = {};\n  if (!dataToVerify.reference) response.reference = \"Please enter a reference\";\n  if (!dataToVerify.company) response.company = \"Please select a company\";\n  if (!dataToVerify.amount) response.amount = \"Please enter an amount\";\n  if (!dataToVerify.contact) response.contact = \"Please select a contact\";\n  if (!dataToVerify.received) response.received = \"Please select a date\";\n  if (dataToVerify.paid !== false && dataToVerify.paid !== true)\n    response.paid = \"Please select a paid status\";\n  response.ok = Object.keys(response).length > 0 ? false : true;\n  return response;\n};\nconst contactVerify = (dataToVerify) => {\n  let response = {};\n  if (!dataToVerify.firstname) response.firstname = \"Please enter a firstname\";\n  if (!dataToVerify.lastname) response.lastname = \"Please enter a lastname\";\n  if (!dataToVerify.contactcompany)\n    response.contactcompany = \"Please select a contact\";\n  if (!dataToVerify.email) response.email = \"Please enter an email\";\n  if (!dataToVerify.phonenumber)\n    response.phonenumber = \"Please enter a phone number\";\n  response.ok = Object.keys(response).length > 0 ? false : true;\n  return response;\n};\n\nconst companyVerify = (dataToVerify) => {\n  let response = {};\n  if (!dataToVerify.name) response.name = \"Please enter a name\";\n  if (!dataToVerify.vat) response.vat = \"Please enter a vat number\";\n  if (!dataToVerify.status) response.status = \"Please select a status\";\n  response.ok = Object.keys(response).length > 0 ? false : true;\n  return response;\n};\n\nexport { invoiceVerify, contactVerify, companyVerify };\n"],"names":["$1ec4156a7929aedf$export$2e2bcd8739ae039","invoices","companies","contacts","setIsLoaded","isAuth","loaded","length","params","$kYfAi","useParams","navigate","useNavigate","invoice","find","el","id","invoiceId","company","contact","year","received","slice","month","day","isModifying","setIsModifying","$eCRxs","useState","isDeleting","setIsDeleting","selectedCompany","setSelectedCompany","selectedContact","setSelectedContact","isFetching","setIsFetching","useEffect","referenceRef","useRef","amountRef","receivedRef","paidRef","$7C6UD","jsxs","className","reference","jsx","type","name","ref","defaultValue","required","amount","$4yknE","default","handleCompanyChange","value","currentCompany","onClick","style","cursor","$eltSV","currentContact","handleContactChange","firstname","lastname","htmlFor","paid","defaultChecked","role","$enOpT","originalCompany","originalContact","handleModif","async","formData","current","toString","checked","check","$5H5kc","invoiceVerify","ok","status","message","dataPackage","$9aCo1","jwt","setTimeout","$dv2Dk","toast","success","position","POSITION","BOTTOM_RIGHT","error","issues","Object","keys","issue","handleDelete","sessionStorage","setItem","ToastContainer","$e497f1a838d958a9$export$2e2bcd8739ae039","$27c888b5041dae3c$export$2e2bcd8739ae039","onChange","e","target","map","$584feee2975545c7$export$2e2bcd8739ae039","contactcompany","$42551951195d288c$export$7e6a64f84fea9213","dataToVerify","response","$42551951195d288c$export$9204046200024146","email","phonenumber","$42551951195d288c$export$927967c6383eee08","vat"],"version":3,"file":"Invoice.41795c49.js.map"}