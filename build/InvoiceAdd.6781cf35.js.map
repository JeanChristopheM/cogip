{"mappings":"wgBAgLAA,YApKqBC,SAACA,EAAQC,UAAEA,EAASC,WAAEA,EAAUC,YAAEA,EAAWC,OAAEA,IAClE,MAAOC,EAAiBC,GAAsBC,EAAAC,SAAS,KAChDC,EAAiBC,GAAsBH,EAAAC,SAAS,KAChDG,EAAYC,GAAiBL,EAAAC,UAAS,GAkE7C,OAjEAD,EAAAM,WAAS,KACP,MAAMC,EAAUC,eAAeC,QAAQ,cACvC,IAAKF,EAAS,OACd,MAAMG,EAAeH,EAAQI,MAAM,KACnCC,EAAAC,MAAMH,EAAa,IAAIA,EAAa,GAAI,CACtCI,SAAUF,EAAAC,MAAME,SAASC,eAE3BR,eAAeS,WAAW,gBACzB,CAACb,IAyDEc,EAAAC,KACH,OAAI,kBACF,MAAG,CAACC,UAAU,kCACZ,KAAE,UAAC,4BACH,OAAI,CAACA,UAAU,cAAcC,SArDlBC,MAAUC,IAC1BA,EAAEC,iBACFnB,GAAc,GAEd,MAAMoB,EAAW,CACfC,UAAWH,EAAEI,OAAOD,UAAUE,MAC9BC,OAAQC,SAASP,EAAEI,OAAOE,OAAOD,OACjCG,QAASjC,EAAkBA,EAAgBkC,GAAK,KAChDC,QAAS/B,EAAkBA,EAAgB8B,GAAK,KAChDE,SAAUX,EAAEI,OAAOQ,KAAKP,MACxBQ,QAASb,EAAEI,OAAOS,QAAQR,MAC1BS,WAAYd,EAAEI,OAAOW,KAAKC,QAC1BC,SAAUV,SAASP,EAAEI,OAAOa,SAASZ,OACrCa,IAAKlB,EAAEI,OAAOW,KAAKC,QAAU,EAAIT,SAASP,EAAEI,OAAOE,OAAOD,OAC1DU,KAAMf,EAAEI,OAAOW,KAAKC,QAAUT,SAASP,EAAEI,OAAOE,OAAOD,OAAS,GAElEc,QAAQC,IAAIlB,GAGZ,IAAImB,EAAQC,EAAAC,cAAcrB,GAE1B,GAAImB,EAAMG,GAAI,CACZ,MAAOC,OAACA,EAAMzC,QAAEA,EAAO0C,YAAEA,SAAsBC,EAAAC,QAC7C,OACA,8CACAtD,EAAOuD,IACP3B,GAEFpB,GAAc,GACdT,GAAY,GACG,MAAXoD,EACFxC,eAAe6C,QAAQ,aAAc,qBAClC7C,eAAe6C,QAAQ,aAAY,SAAW9C,SAC9C,CACLF,GAAc,GAEd,MAAMiD,EAASC,OAAOC,KAAKZ,GAC3Ba,YAAU,KACR,IAAK,IAAIC,KAASJ,EACF,OAAVI,GACF9C,EAAAC,MAAM8C,MAAMf,EAAMc,GAAQ,CACxB5C,SAAUF,EAAAC,MAAME,SAASC,iBAI9B,wBASE,MAAG,CAACI,UAAU,+BACZ,WAAQ,iBACN,SAAM,UAAC,2BACP,MAAG,iBACD,QAAK,CAACwC,QAAQ,qBAAY,uBAC1B,QAAK,CACJC,KAAK,OACLC,KAAK,YACLC,UAAU,IACVC,UAAU,KACVC,UAAQ,cAGX,MAAG,iBACD,QAAK,CAACL,QAAQ,gBAAO,+BACrB,QAAK,CAACC,KAAK,OAAOC,KAAK,OAAOG,UAAQ,cAExC,MAAG,iBACD,QAAK,CAACL,QAAQ,mBAAU,qBACxBM,EAAAf,QAAe,CACdzD,UAAWA,EACXyE,oBAlFavC,IAC3B7B,EAAmB6B,IAkFLwC,eAAgB,CAAEN,KAAM,gBAG3B,MAAG,iBACD,QAAK,CAACF,QAAQ,mBAAU,qBACxBS,EAAAlB,QAAe,CACd1D,SAAUA,EACVC,UAAWA,EACXI,gBAAiBA,EACjBwE,oBAzFa1C,IAC3BzB,EAAmByB,IAyFL2C,eAAgB,CAAET,KAAM,IACxBA,KAAM,sBAGT,MAAG,iBACD,QAAK,CAACF,QAAQ,oBAAW,uBACzB,SAAM,CAACE,KAAK,WAAW9B,GAAG,2BACxB,SAAM,CAACJ,MAAM,YAAG,sBAChBjC,EACGA,EAAW6E,KAAKhC,GAAQtB,EAAAuD,IACrB,SAAM,CAAmB7C,MAAOY,EAASR,YACvCQ,EAASA,UADCA,EAASR,MAIxB,qBAIT,WAAQ,iBACN,SAAM,UAAC,oBACP,MAAG,iBACD,QAAK,CAAC4B,QAAQ,kBAAS,oBACvB,QAAK,CAACC,KAAK,SAASC,KAAK,SAASG,UAAQ,cAE5C,MAAG,iBACD,QAAK,CAACL,QAAQ,mBAAU,sBACxB,QAAK,CAACC,KAAK,OAAOC,KAAK,UAAUG,UAAQ,cAE3C,MAAG,iBACD,OAAI,UAAC,0BACL,QAAK,CAACL,QAAQ,OAAOxC,UAAU,+BAC7B,QAAK,CACJyC,KAAK,WACLC,KAAK,OACL9B,GAAG,OACHZ,UAAU,sBAEX,OAAI,CAACA,UAAU,6BAKvB,SAAM,UAAC,oBAET,MAAG,CAACA,UAAU,0BACZsD,EAAAvB,QAAmB,YAErBvC,EAAA+D,eAAc,OAEhBvE,EAAUc,EAAAuD,IACR,MAAG,CAACrD,UAAU,+BACZ,MAAG,CAACA,UAAU,oBAEf,6JC3KV,MAAMwD,EAAiBC,IACrB,IAAIC,EAAW,GAQf,OAPKD,EAAanD,YAAWoD,EAASpD,UAAY,4BAC7CmD,EAAa9C,UAAS+C,EAAS/C,QAAU,2BACzC8C,EAAahD,SAAQiD,EAASjD,OAAS,0BACvCgD,EAAa3C,WAAU4C,EAAS5C,SAAW,yBAChB,IAA5B2C,EAAaxC,aAAoD,IAA5BwC,EAAaxC,aACpDyC,EAASxC,KAAO,+BAClBwC,EAAS/B,KAAKQ,OAAOC,KAAKsB,GAAUC,OAAS,GACtCD,GAEHE,EAAiBH,IACrB,IAAIC,EAAW,GAQf,OAPKD,EAAaI,YAAWH,EAASG,UAAY,4BAC7CJ,EAAaK,WAAUJ,EAASI,SAAW,2BAC3CL,EAAanF,YAAWoF,EAASpF,UAAY,2BAC7CmF,EAAaM,QAAOL,EAASK,MAAQ,yBACrCN,EAAaO,cAChBN,EAASM,YAAc,+BACzBN,EAAS/B,KAAKQ,OAAOC,KAAKsB,GAAUC,OAAS,GACtCD,GAGHO,EAAiBR,IACrB,IAAIC,EAAW,GAUf,OATKD,EAAaf,OAAMgB,EAAShB,KAAO,uBACnCe,EAAaS,MAAKR,EAASQ,IAAM,6BACjCT,EAAaU,OAAMT,EAASS,KAAO,uBACnCV,EAAaW,SAAQV,EAASU,OAAS,yBACvCX,EAAaY,eAChBX,EAASW,aAAe,gCACrBZ,EAAaa,UAASZ,EAASY,QAAU,0BACzCb,EAAa7B,SAAQ8B,EAAS9B,OAAS,0BAC5C8B,EAAS/B,KAAKQ,OAAOC,KAAKsB,GAAUC,OAAS,GACtCD,4FCJTa,YA9B0BjG,UACxBA,EAASyE,oBACTA,EAAmBC,eACnBA,EAAcN,KACdA,IAEA,OAAM5C,EAAAC,KACH,SAAM,CACLyE,SAAWrE,IACT,IAAIQ,EAAUrC,EAAUmG,MAAMC,GAAOA,EAAGhC,MAAQvC,EAAEI,OAAOC,QACrDlC,EAAUmG,MAAMC,GAAOA,EAAGhC,MAAQvC,EAAEI,OAAOC,QAC3C,GACJuC,EAAoBpC,IAEtBgE,aAAc3B,EAAeN,KAC7BA,KAAMA,EACNG,UAAQ,kBAEP,SAAM,CAACrC,MAAM,YAAG,qBAChBlC,EAAU8E,KAAKzC,GACRb,EAAAuD,IACH,SAAM,CAAC7C,MAAOG,EAAQ+B,cACpB/B,EAAQ+B,MADuB/B,EAAQC","sources":["src/components/invoices/InvoiceAdd.jsx","src/logic/formValidation.js","src/components/reusables/CompanySelector.jsx"],"sourcesContent":["import { useState, useEffect } from \"react\";\nimport handleRequests from \"../../logic/handleRequests\";\nimport { invoiceVerify } from \"../../logic/formValidation\";\n\nimport CompanySelector from \"../reusables/CompanySelector\";\nimport ContactSelector from \"../reusables/ContactSelector\";\nimport InvoiceIllustration from \"../reusables/InvoiceIllustration.jsx\";\n// toaster\nimport { ToastContainer, toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\n// end toaster\n\nfunction InvoiceAdd({ contacts, companies, categories, setIsLoaded, isAuth }) {\n  const [selectedCompany, setSelectedCompany] = useState(\"\");\n  const [selectedContact, setSelectedContact] = useState(\"\");\n  const [isFetching, setIsFetching] = useState(false);\n  useEffect(() => {\n    const message = sessionStorage.getItem(\"cogipToast\");\n    if (!message) return;\n    const messageArray = message.split(\",\");\n    toast[messageArray[0]](messageArray[1], {\n      position: toast.POSITION.BOTTOM_RIGHT,\n    });\n    sessionStorage.removeItem(\"cogipToast\");\n  }, [isFetching]);\n  const handleCompanyChange = (value) => {\n    setSelectedCompany(value);\n  };\n  const handleContactChange = (value) => {\n    setSelectedContact(value);\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setIsFetching(true);\n    /* Instantiate object with form data */\n    const formData = {\n      reference: e.target.reference.value,\n      amount: parseInt(e.target.amount.value),\n      company: selectedCompany ? selectedCompany.id : null,\n      contact: selectedContact ? selectedContact.id : null,\n      received: e.target.date.value,\n      dueDate: e.target.dueDate.value,\n      paidStatus: e.target.paid.checked,\n      category: parseInt(e.target.category.value),\n      due: e.target.paid.checked ? 0 : parseInt(e.target.amount.value),\n      paid: e.target.paid.checked ? parseInt(e.target.amount.value) : 0,\n    };\n    console.log(formData);\n\n    // Data verification\n    let check = invoiceVerify(formData);\n    // Posting data if OK\n    if (check.ok) {\n      const { status, message, dataPackage } = await handleRequests(\n        \"POST\",\n        \"https://csharpproject.somee.com/api/Invoice\",\n        isAuth.jwt,\n        formData\n      );\n      setIsFetching(false);\n      setIsLoaded(false);\n      if (status === 200)\n        sessionStorage.setItem(\"cogipToast\", \"success,Success !\");\n      else sessionStorage.setItem(\"cogipToast\", `error,${message}`);\n    } else {\n      setIsFetching(false);\n      // Handling Errors\n      const issues = Object.keys(check);\n      setTimeout(() => {\n        for (let issue of issues) {\n          if (issue !== \"ok\") {\n            toast.error(check[issue], {\n              position: toast.POSITION.BOTTOM_RIGHT,\n            });\n          }\n        }\n      }, 250);\n    }\n  };\n\n  return (\n    <main>\n      <div className=\"invoiceAdd card\">\n        <h2>Fill up the form</h2>\n        <form className=\"invoiceForm\" onSubmit={handleSubmit}>\n          <div className=\"formContent\">\n            <fieldset>\n              <legend>Invoice details</legend>\n              <div>\n                <label htmlFor=\"reference\">Reference : </label>\n                <input\n                  type=\"text\"\n                  name=\"reference\"\n                  minLength=\"3\"\n                  maxLength=\"45\"\n                  required\n                />\n              </div>\n              <div>\n                <label htmlFor=\"date\">Date of reception : </label>\n                <input type=\"date\" name=\"date\" required />\n              </div>\n              <div>\n                <label htmlFor=\"company\">Company : </label>\n                <CompanySelector\n                  companies={companies}\n                  handleCompanyChange={handleCompanyChange}\n                  currentCompany={{ name: \"\" }}\n                />\n              </div>\n              <div>\n                <label htmlFor=\"contact\">Contact : </label>\n                <ContactSelector\n                  contacts={contacts}\n                  companies={companies}\n                  selectedCompany={selectedCompany}\n                  handleContactChange={handleContactChange}\n                  currentContact={{ name: \"\" }}\n                  name={\"company\"}\n                />\n              </div>\n              <div>\n                <label htmlFor=\"category\">Category : </label>\n                <select name=\"category\" id=\"category\">\n                  <option value=\"\">Select a category</option>\n                  {categories\n                    ? categories.map((category) => (\n                        <option key={category.id} value={category.id}>\n                          {category.category}\n                        </option>\n                      ))\n                    : null}\n                </select>\n              </div>\n            </fieldset>\n            <fieldset>\n              <legend>Payement</legend>\n              <div>\n                <label htmlFor=\"amount\">Amount : </label>\n                <input type=\"number\" name=\"amount\" required />\n              </div>\n              <div>\n                <label htmlFor=\"dueDate\">Due date : </label>\n                <input type=\"date\" name=\"dueDate\" required />\n              </div>\n              <div>\n                <span>Paid status : </span>\n                <label htmlFor=\"paid\" className=\"switchToggle\">\n                  <input\n                    type=\"checkbox\"\n                    name=\"paid\"\n                    id=\"paid\"\n                    className=\"switchCheck\"\n                  />\n                  <span className=\"slider\"></span>\n                </label>\n              </div>\n            </fieldset>\n          </div>\n          <button>Submit</button>\n        </form>\n        <div className=\"formIllu\">\n          <InvoiceIllustration />\n        </div>\n        <ToastContainer />\n      </div>\n      {isFetching ? (\n        <div className=\"fetching dark\">\n          <div className=\"lds-dual-ring\"></div>\n        </div>\n      ) : null}\n    </main>\n  );\n}\n\nexport default InvoiceAdd;\n","const invoiceVerify = (dataToVerify) => {\n  let response = {};\n  if (!dataToVerify.reference) response.reference = \"Please enter a reference\";\n  if (!dataToVerify.company) response.company = \"Please select a company\";\n  if (!dataToVerify.amount) response.amount = \"Please enter an amount\";\n  if (!dataToVerify.received) response.received = \"Please select a date\";\n  if (dataToVerify.paidStatus !== false && dataToVerify.paidStatus !== true)\n    response.paid = \"Please select a paid status\";\n  response.ok = Object.keys(response).length > 0 ? false : true;\n  return response;\n};\nconst contactVerify = (dataToVerify) => {\n  let response = {};\n  if (!dataToVerify.firstname) response.firstname = \"Please enter a firstname\";\n  if (!dataToVerify.lastname) response.lastname = \"Please enter a lastname\";\n  if (!dataToVerify.companies) response.companies = \"Please select a contact\";\n  if (!dataToVerify.email) response.email = \"Please enter an email\";\n  if (!dataToVerify.phonenumber)\n    response.phonenumber = \"Please enter a phone number\";\n  response.ok = Object.keys(response).length > 0 ? false : true;\n  return response;\n};\n\nconst companyVerify = (dataToVerify) => {\n  let response = {};\n  if (!dataToVerify.name) response.name = \"Please enter a name\";\n  if (!dataToVerify.vat) response.vat = \"Please enter a vat number\";\n  if (!dataToVerify.town) response.town = \"Please enter a town\";\n  if (!dataToVerify.street) response.street = \"Please enter a street\";\n  if (!dataToVerify.streetnumber)\n    response.streetnumber = \"Please enter a street number\";\n  if (!dataToVerify.country) response.country = \"Please enter a country\";\n  if (!dataToVerify.status) response.status = \"Please select a status\";\n  response.ok = Object.keys(response).length > 0 ? false : true;\n  return response;\n};\n\nexport { invoiceVerify, contactVerify, companyVerify };\n","function CompanySelector({\n  companies,\n  handleCompanyChange,\n  currentCompany,\n  name,\n}) {\n  return (\n    <select\n      onChange={(e) => {\n        let company = companies.find((el) => el.name == e.target.value)\n          ? companies.find((el) => el.name == e.target.value)\n          : \"\";\n        handleCompanyChange(company);\n      }}\n      defaultValue={currentCompany.name}\n      name={name}\n      required\n    >\n      <option value=\"\">Select a company</option>\n      {companies.map((company) => {\n        return (\n          <option value={company.name} key={company.id}>\n            {company.name}\n          </option>\n        );\n      })}\n    </select>\n  );\n}\n\nexport default CompanySelector;\n"],"names":["$d356230963735a75$export$2e2bcd8739ae039","contacts","companies","categories","setIsLoaded","isAuth","selectedCompany","setSelectedCompany","$eCRxs","useState","selectedContact","setSelectedContact","isFetching","setIsFetching","useEffect","message","sessionStorage","getItem","messageArray","split","$dv2Dk","toast","position","POSITION","BOTTOM_RIGHT","removeItem","$7C6UD","jsxs","className","onSubmit","async","e","preventDefault","formData","reference","target","value","amount","parseInt","company","id","contact","received","date","dueDate","paidStatus","paid","checked","category","due","console","log","check","$5H5kc","invoiceVerify","ok","status","dataPackage","$9aCo1","default","jwt","setItem","issues","Object","keys","setTimeout","issue","error","htmlFor","type","name","minLength","maxLength","required","$4yknE","handleCompanyChange","currentCompany","$eltSV","handleContactChange","currentContact","map","jsx","$lb0XH","ToastContainer","$42551951195d288c$export$7e6a64f84fea9213","dataToVerify","response","length","$42551951195d288c$export$9204046200024146","firstname","lastname","email","phonenumber","$42551951195d288c$export$927967c6383eee08","vat","town","street","streetnumber","country","$27c888b5041dae3c$export$2e2bcd8739ae039","onChange","find","el","defaultValue"],"version":3,"file":"InvoiceAdd.6781cf35.js.map"}