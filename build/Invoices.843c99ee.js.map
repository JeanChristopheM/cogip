{"mappings":"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","sources":["src/components/invoices/Invoices.jsx","src/logic/dateFormatter.js"],"sourcesContent":["import { useMemo, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useTable, useSortBy, useFilters } from \"react-table\";\nimport SelectFilter from \"../reusables/SelectFilter\";\nimport { dateFormatter } from \"../../logic/dateFormatter\";\nimport { ToastContainer, toast } from \"react-toastify\";\n\nfunction Invoices({ invoices, contacts, companies }) {\n  useEffect(() => {\n    const message = sessionStorage.getItem(\"cogipToast\");\n    if (!message) return;\n    toast.success(message, {\n      position: toast.POSITION.BOTTOM_RIGHT,\n    });\n    sessionStorage.removeItem(\"cogipToast\");\n  }, []);\n  const navigate = useNavigate();\n  const handleAdd = (e) => {\n    navigate(`/${e.target.id}`);\n  };\n  /* SETTING UP TABLE */\n  const data = useMemo(() => {\n    let results = [];\n    for (let entry of invoices) {\n      const company = companies.find((el) => el.id == entry.company);\n      const contact = contacts.find((el) => el.id == entry.contact)\n        ? contacts.find((el) => el.id == entry.contact)\n        : null;\n      let arrow = company.status === \"Client\" ? \"down\" : \"up\";\n      let obj = {\n        icon: <i className={`fas fa-arrow-${arrow}`}></i>,\n        col1: entry.reference,\n        col2: `${entry.amount}€`,\n        col3: `${entry.paid}€`,\n        col4: `${entry.due}€`,\n        col5: company.name,\n        col6: contact ? `${contact.firstname} ${contact.lastname}` : \"None\",\n        col7: dateFormatter(entry.received),\n        col8: entry.paidStatus ? \"Paid\" : \"To be paid\",\n        id: entry.id,\n      };\n      results.push(obj);\n    }\n    return results;\n  }, [invoices]);\n  const columns = useMemo(\n    () => [\n      {\n        Header: \"\",\n        accessor: \"icon\",\n        className: \"invoiceIcon\",\n        disableSortBy: true,\n        disableFilters: true,\n      },\n      {\n        Header: \"Reference\",\n        accessor: \"col1\",\n        className: \"invoiceReference\",\n        disableFilters: true,\n      },\n      {\n        Header: \"Amount\",\n        accessor: \"col2\",\n        className: \"invoiceAmount\",\n        disableFilters: true,\n      },\n      {\n        Header: \"Paid\",\n        accessor: \"col3\",\n        className: \"invoicePaid\",\n        disableFilters: true,\n      },\n      {\n        Header: \"Due\",\n        accessor: \"col4\",\n        className: \"invoiceDue\",\n        disableFilters: true,\n      },\n      {\n        Header: \"Company\",\n        accessor: \"col5\",\n        className: \"invoiceCompany\",\n        Filter: SelectFilter,\n        filter: \"includes\",\n      },\n      {\n        Header: \"Contact\",\n        accessor: \"col6\",\n        className: \"invoiceContact\",\n        Filter: SelectFilter,\n        filter: \"includes\",\n      },\n      {\n        Header: \"Received\",\n        accessor: \"col7\",\n        className: \"invoiceReceived\",\n        disableFilters: true,\n      },\n      {\n        Header: \"Status\",\n        accessor: \"col8\",\n        className: \"invoicePaidStatus\",\n        Filter: SelectFilter,\n        filter: \"includes\",\n      },\n      {\n        Header: \"ID\",\n        accessor: \"id\",\n        className: \"contactId\",\n        disableFilters: true,\n      },\n    ],\n    [invoices]\n  );\n  const { getTableProps, getTableBodyProps, headerGroups, rows, prepareRow } =\n    useTable(\n      {\n        columns,\n        data,\n        initialState: {\n          sortBy: [{ id: \"col1\", desc: false }],\n          hiddenColumns: [\"id\"],\n        },\n      },\n      useFilters,\n      useSortBy\n    );\n  const handleClick = (header, contactName, companyName, invoiceId) => {\n    switch (header) {\n      case \"Contact\":\n        if (contactName !== \"None\")\n          navigate(\n            `/contact/${\n              contacts.find(\n                (el) => `${el.firstname} ${el.lastname}` == contactName\n              ).id\n            }`\n          );\n        break;\n      case \"Company\":\n        navigate(\n          `/company/${companies.find((el) => el.name == companyName).id}`\n        );\n        break;\n      case \"Reference\":\n        navigate(`/invoice/${invoiceId}`);\n        break;\n      default:\n        break;\n    }\n  };\n  return (\n    <main>\n      <section className=\"invoices card\">\n        <h2>\n          Invoices\n          <button\n            type=\"button\"\n            id=\"invoiceAdd\"\n            onClick={handleAdd}\n            style={{ padding: \"0 .5rem\" }}\n          >\n            +\n          </button>\n        </h2>\n        <table className=\"table\" {...getTableProps()}>\n          <thead>\n            {headerGroups.map((headerGroup) => (\n              <tr {...headerGroup.getHeaderGroupProps()}>\n                {headerGroup.headers.map((column) => (\n                  <th\n                    {...column.getHeaderProps(\n                      column.getSortByToggleProps({\n                        className: column.className,\n                      })\n                    )}\n                  >\n                    <div className=\"thContainer\">\n                      {column.render(\"Header\")}\n                      <span>\n                        {column.isSorted ? (\n                          column.isSortedDesc ? (\n                            <i className=\"fas fa-arrow-alt-circle-up sorted\"></i>\n                          ) : (\n                            <i className=\"fas fa-arrow-alt-circle-down sorted\"></i>\n                          )\n                        ) : (\n                          <i className=\"fas fa-arrow-alt-circle-down unSorted\"></i>\n                        )}\n                      </span>\n                    </div>\n                  </th>\n                ))}\n              </tr>\n            ))}\n            {headerGroups.map((headerGroup) => (\n              <tr\n                {...headerGroup.getHeaderGroupProps()}\n                className={\"filtersRow\"}\n              >\n                {headerGroup.headers.map((column) => (\n                  <th\n                    key={column.id}\n                    {...column.getHeaderProps({\n                      className: column.className,\n                    })}\n                  >\n                    <div className=\"filterContainer\">\n                      {column.canFilter ? column.render(\"Filter\") : null}\n                    </div>\n                  </th>\n                ))}\n              </tr>\n            ))}\n          </thead>\n          <tbody {...getTableBodyProps()}>\n            {rows.map((row) => {\n              prepareRow(row);\n              return (\n                <tr {...row.getRowProps()}>\n                  {row.cells.map((cell) => {\n                    return (\n                      <td\n                        {...cell.getCellProps({\n                          className: cell.column.className,\n                        })}\n                        onClick={() => {\n                          handleClick(\n                            cell.column.Header,\n                            cell.row.allCells[6].value,\n                            cell.row.allCells[5].value,\n                            cell.row.allCells[9].value\n                          );\n                        }}\n                      >\n                        {cell.render(\"Cell\")}\n                      </td>\n                    );\n                  })}\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n      </section>\n      <ToastContainer />\n    </main>\n  );\n}\n\nexport default Invoices;\n","const dateFormatter = (dateInput) => {\n  const dateOutput = `${dateInput.slice(8, 10)}-${dateInput.slice(\n    5,\n    7\n  )}-${dateInput.slice(0, 4)}`;\n  return dateOutput;\n};\nexport { dateFormatter };\n"],"names":["$d462550c5b3a69a6$export$2e2bcd8739ae039","invoices","contacts","companies","$eCRxs","useEffect","message","sessionStorage","getItem","$dv2Dk","toast","success","position","POSITION","BOTTOM_RIGHT","removeItem","navigate","$kYfAi","useNavigate","data","useMemo","results","entry","company","find","el","id","contact","arrow","status","obj","icon","$7C6UD","jsx","className","col1","reference","col2","amount","col3","paid","col4","due","col5","name","col6","firstname","lastname","col7","$gXTmb","dateFormatter","received","col8","paidStatus","push","columns","Header","accessor","disableSortBy","disableFilters","Filter","$bjE0N","default","filter","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","$3NGAg","useTable","initialState","sortBy","desc","hiddenColumns","useFilters","useSortBy","jsxs","type","onClick","e","target","style","padding","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","getSortByToggleProps","render","isSorted","isSortedDesc","canFilter","row","getRowProps","cells","cell","getCellProps","header","contactName","companyName","invoiceId","handleClick","allCells","value","ToastContainer","$c59d18b9d58e05d0$export$406508d2ca449bd","dateInput","slice"],"version":3,"file":"Invoices.843c99ee.js.map"}