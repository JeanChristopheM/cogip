{"mappings":"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","sources":["src/components/contacts/Contact.jsx","src/components/contacts/ContactControls.jsx","src/components/reusables/CompanySelector.jsx","src/logic/formValidation.js"],"sourcesContent":["import { useState, useRef, useEffect } from \"react\";\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport ContactControls from \"./ContactControls.jsx\";\nimport CompanySelector from \"../reusables/CompanySelector.jsx\";\nimport handleRequests from \"../../logic/handleRequests\";\nimport { contactVerify } from \"../../logic/formValidation\";\n\n// toaster\nimport { ToastContainer, toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\n// end toaster\n\nfunction Contact({ contacts, companies, setIsLoaded, isAuth }) {\n  const loaded = contacts.length > 0 ? true : false;\n  const params = useParams();\n  const navigate = useNavigate();\n  const contact = contacts.find((el) => el.id == params.contactId);\n  const company = contact\n    ? companies.find((el) => el.id == contact.contactcompany)\n    : null;\n\n  const [selectedCompany, setSelectedCompany] = useState(company);\n  const [isModifying, setIsModifying] = useState(false);\n  const [isDeleting, setIsDeleting] = useState(false);\n  const [isFetching, setIsFetching] = useState(false);\n\n  useEffect(() => {\n    if (!contact) navigate(\"/contacts\");\n  }, [contacts]);\n\n  const firstnameRef = useRef();\n  const lastnameRef = useRef();\n  const emailRef = useRef();\n  const phonenumberRef = useRef();\n  const handleCompanyChange = (company) => {\n    setSelectedCompany(company);\n  };\n  const handleModif = async () => {\n    const formData = {\n      firstname: firstnameRef.current.value,\n      lastname: lastnameRef.current.value,\n      contactcompany: selectedCompany.id.toString(),\n      email: emailRef.current.value,\n      phonenumber: phonenumberRef.current.value,\n    };\n    let check = contactVerify(formData);\n    setIsFetching(true);\n    if (check.ok) {\n      const { status, message, dataPackage } = await handleRequests(\n        \"PUT\",\n        `https://csharpproject.somee.com/api/contact/${params.contactId}`,\n        isAuth.jwt,\n        formData\n      );\n      setIsLoaded(false);\n      setIsFetching(false);\n      if (status === 200) {\n        setTimeout(() => {\n          toast.success(message, {\n            position: toast.POSITION.BOTTOM_RIGHT,\n          });\n        }, 250);\n      } else {\n        setTimeout(() => {\n          toast.error(message, {\n            position: toast.POSITION.BOTTOM_RIGHT,\n          });\n        }, 250);\n      }\n    } else {\n      setIsFetching(false);\n      const issues = Object.keys(check);\n      setTimeout(() => {\n        for (let issue of issues) {\n          if (issue !== \"ok\") {\n            toast.error(check[issue], {\n              position: toast.POSITION.BOTTOM_RIGHT,\n            });\n          }\n        }\n      }, 250);\n    }\n  };\n  const handleDelete = async () => {\n    setIsFetching(true);\n    const { status, message } = await handleRequests(\n      \"DELETE\",\n      `https://csharpproject.somee.com/api/Contact/${contact.id}`,\n      isAuth.jwt\n    );\n    setIsFetching(false);\n    if (status !== 200) {\n      toast.error(\"There was an error deleting this contact\", {\n        position: toast.POSITION.BOTTOM_RIGHT,\n      });\n    }\n    sessionStorage.setItem(\"cogipToast\", \"Success !\");\n    setIsDeleting(false);\n    setIsLoaded(false);\n  };\n  return (\n    <main>\n      {isFetching || !loaded || !contact ? (\n        <div className=\"fetching\">\n          <div className=\"lds-dual-ring\"></div>\n        </div>\n      ) : (\n        <div className=\"card\">\n          <h2>\n            {contact.firstname} {contact.lastname}\n          </h2>\n          <div className=\"contactGrid\">\n            <span>Firstname : </span>\n            {isModifying ? (\n              <input\n                type=\"text\"\n                name=\"contactFirstname\"\n                defaultValue={contact.firstname}\n                ref={firstnameRef}\n              />\n            ) : (\n              <span id=\"contactFirstname\">{contact.firstname}</span>\n            )}\n            <span>Lastname : </span>\n            {isModifying ? (\n              <input\n                type=\"text\"\n                name=\"contactLastname\"\n                defaultValue={contact.lastname}\n                ref={lastnameRef}\n              />\n            ) : (\n              <span id=\"contactLastname\">{contact.lastname}</span>\n            )}\n            <span>Company : </span>\n            {isModifying ? (\n              <CompanySelector\n                currentCompany={company}\n                companies={companies}\n                name={\"contactCompany\"}\n                handleCompanyChange={handleCompanyChange}\n              />\n            ) : (\n              <span\n                id=\"contactCompany\"\n                onClick={() => {\n                  navigate(`/company/${company.id}`);\n                }}\n                style={{ cursor: \"pointer\" }}\n              >\n                {company.name}\n              </span>\n            )}\n            <span>Email : </span>\n            {isModifying ? (\n              <input\n                type=\"text\"\n                name=\"contactEmail\"\n                defaultValue={contact.email}\n                ref={emailRef}\n              />\n            ) : (\n              <span id=\"contactEmail\">{contact.email}</span>\n            )}\n            <span>Phone number : </span>\n            {isModifying ? (\n              <input\n                type=\"text\"\n                name=\"contactPhonenumber\"\n                defaultValue={contact.phonenumber}\n                ref={phonenumberRef}\n              />\n            ) : (\n              <span id=\"contactPhonenumber\">{contact.phonenumber}</span>\n            )}\n          </div>\n          {isAuth.role == \"Admin\" ? (\n            <ContactControls\n              isModifying={isModifying}\n              setIsModifying={setIsModifying}\n              isDeleting={isDeleting}\n              setIsDeleting={setIsDeleting}\n              handleModif={handleModif}\n              handleDelete={handleDelete}\n            />\n          ) : (\n            \"\"\n          )}\n        </div>\n      )}\n      <ToastContainer />\n    </main>\n  );\n}\n\nexport default Contact;\n","function ContactControls({\n  isModifying,\n  isDeleting,\n  setIsModifying,\n  setIsDeleting,\n  handleModif,\n  handleDelete,\n}) {\n  if (isModifying) {\n    return (\n      <div className={\"contactControls\"}>\n        <button type=\"button\" onClick={handleModif}>\n          Submit\n        </button>\n        <button\n          type=\"button\"\n          onClick={() => {\n            setIsModifying(false);\n          }}\n        >\n          Cancel\n        </button>\n      </div>\n    );\n  }\n  if (isDeleting) {\n    return (\n      <div className={\"contactControls\"}>\n        <button type=\"button\" onClick={handleDelete}>\n          Confirm\n        </button>\n        <button\n          type=\"button\"\n          onClick={() => {\n            setIsDeleting(false);\n          }}\n        >\n          Cancel\n        </button>\n      </div>\n    );\n  }\n  return (\n    <div className={\"contactControls\"}>\n      <button\n        type=\"button\"\n        onClick={() => {\n          setIsModifying(true);\n        }}\n      >\n        Modify\n      </button>\n      <button\n        type=\"button\"\n        onClick={() => {\n          setIsDeleting(true);\n        }}\n      >\n        Delete\n      </button>\n    </div>\n  );\n}\n\nexport default ContactControls;\n","function CompanySelector({\n  companies,\n  handleCompanyChange,\n  currentCompany,\n  name,\n}) {\n  return (\n    <select\n      onChange={(e) => {\n        let company = companies.find((el) => el.name == e.target.value)\n          ? companies.find((el) => el.name == e.target.value)\n          : \"\";\n        handleCompanyChange(company);\n      }}\n      defaultValue={currentCompany.name}\n      name={name}\n      required\n    >\n      <option value=\"\">Select a company</option>\n      {companies.map((company) => {\n        return (\n          <option value={company.name} key={company.id}>\n            {company.name}\n          </option>\n        );\n      })}\n    </select>\n  );\n}\n\nexport default CompanySelector;\n","const invoiceVerify = (dataToVerify) => {\n  let response = {};\n  if (!dataToVerify.reference) response.reference = \"Please enter a reference\";\n  if (!dataToVerify.company) response.company = \"Please select a company\";\n  if (!dataToVerify.amount) response.amount = \"Please enter an amount\";\n  if (!dataToVerify.contact) response.contact = \"Please select a contact\";\n  if (!dataToVerify.received) response.received = \"Please select a date\";\n  if (dataToVerify.paid !== false && dataToVerify.paid !== true)\n    response.paid = \"Please select a paid status\";\n  response.ok = Object.keys(response).length > 0 ? false : true;\n  return response;\n};\nconst contactVerify = (dataToVerify) => {\n  let response = {};\n  if (!dataToVerify.firstname) response.firstname = \"Please enter a firstname\";\n  if (!dataToVerify.lastname) response.lastname = \"Please enter a lastname\";\n  if (!dataToVerify.contactcompany)\n    response.contactcompany = \"Please select a contact\";\n  if (!dataToVerify.email) response.email = \"Please enter an email\";\n  if (!dataToVerify.phonenumber)\n    response.phonenumber = \"Please enter a phone number\";\n  response.ok = Object.keys(response).length > 0 ? false : true;\n  return response;\n};\n\nconst companyVerify = (dataToVerify) => {\n  let response = {};\n  if (!dataToVerify.name) response.name = \"Please enter a name\";\n  if (!dataToVerify.vat) response.vat = \"Please enter a vat number\";\n  if (!dataToVerify.status) response.status = \"Please select a status\";\n  response.ok = Object.keys(response).length > 0 ? false : true;\n  return response;\n};\n\nexport { invoiceVerify, contactVerify, companyVerify };\n"],"names":["$b8b37f0a6f9246e4$export$2e2bcd8739ae039","contacts","companies","setIsLoaded","isAuth","loaded","length","params","$kYfAi","useParams","navigate","useNavigate","contact","find","el","id","contactId","company1","contactcompany","selectedCompany","setSelectedCompany","$eCRxs","useState","isModifying","setIsModifying","isDeleting","setIsDeleting","isFetching","setIsFetching","useEffect","firstnameRef","useRef","lastnameRef","emailRef","phonenumberRef","$7C6UD","jsxs","className","firstname","lastname","jsx","type","name","defaultValue","ref","$4yknE","default","currentCompany","handleCompanyChange","company","onClick","style","cursor","email","phonenumber","role","$9jFXu","handleModif","async","formData","current","value","toString","check","$5H5kc","contactVerify","ok","status","message","dataPackage","$9aCo1","jwt","setTimeout","$dv2Dk","toast","success","position","POSITION","BOTTOM_RIGHT","error","issues","Object","keys","issue","handleDelete","sessionStorage","setItem","ToastContainer","$5ed51abd9418945a$export$2e2bcd8739ae039","$27c888b5041dae3c$export$2e2bcd8739ae039","onChange","e","target","required","map","$42551951195d288c$export$7e6a64f84fea9213","dataToVerify","response","reference","amount","received","paid","$42551951195d288c$export$9204046200024146","$42551951195d288c$export$927967c6383eee08","vat"],"version":3,"file":"Contact.660a5395.js.map"}