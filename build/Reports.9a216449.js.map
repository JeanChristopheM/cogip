{"mappings":"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","sources":["src/components/reports/Reports.jsx","src/components/reusables/YearChart.jsx"],"sourcesContent":["import YearChart from \"../reusables/YearChart.jsx\";\n\nconst Reports = ({ invoices, companies }) => {\n  const allTransactionsEqual = invoices.reduce((acc, currentValue) => {\n    const companyStatus = companies.find(\n      (el) => el.id === currentValue.company\n    ).status;\n    if (companyStatus === \"Client\") return acc + currentValue.amount;\n    else return acc - currentValue.amount;\n  }, 0);\n  const findBalance = (invoicesArray) => {\n    const balance = invoicesArray.reduce((acc, current) => {\n      const companyStatus = companies.find(\n        (el) => el.id === current.company\n      ).status;\n      if (companyStatus === \"Client\") return acc + current.amount;\n      else return acc - current.amount;\n    }, 0);\n    return balance;\n  };\n  const sortInvoicesPerYear = (invoicesArray) => {\n    const answer = invoicesArray.reduce(function (buckets, invoice) {\n      if (!buckets[invoice.received.slice(0, 4)])\n        buckets[invoice.received.slice(0, 4)] = [];\n      buckets[invoice.received.slice(0, 4)].push(invoice);\n      return buckets;\n    }, {});\n    return answer;\n  };\n  return (\n    <main>\n      <div className=\"card\">\n        <h2>Financial report</h2>\n        <br />\n        <section>\n          <br />\n          <h3>Balance :</h3>\n          <p>Current balance : {findBalance(invoices)}€</p>\n          {Object.keys(sortInvoicesPerYear(invoices))\n            .sort((a, b) => b - a)\n            .map((key) => {\n              return (\n                <p key={key}>\n                  {key} : {findBalance(sortInvoicesPerYear(invoices)[key])}€\n                </p>\n              );\n            })}\n        </section>\n        <section>\n          <br />\n          <h3>Invoices that need to be paid : </h3>\n          {invoices.filter((el) => !el.paid).length}\n        </section>\n        <section>\n          <br />\n          <h3>Year chart</h3>\n          <YearChart\n            invoices={invoices}\n            companies={companies}\n            findBalance={findBalance}\n          />\n        </section>\n      </div>\n    </main>\n  );\n};\nexport default Reports;\n","import {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n} from \"chart.js\";\nimport { Line } from \"react-chartjs-2\";\n\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend\n);\n\nconst YearChart = ({ invoices, companies, findBalance }) => {\n  const invoicesCurrentYear = invoices.filter(\n    (el) => el.received.slice(0, 4) == new Date().getFullYear()\n  );\n  const sortedPerMonth = invoicesCurrentYear.reduce((acc, current) => {\n    if (!acc[current.received.slice(5, 7)])\n      acc[current.received.slice(5, 7)] = [];\n    acc[current.received.slice(5, 7)].push(current);\n    return acc;\n  }, {});\n  const months = [\n    \"01\",\n    \"02\",\n    \"03\",\n    \"04\",\n    \"05\",\n    \"06\",\n    \"07\",\n    \"08\",\n    \"09\",\n    \"10\",\n    \"11\",\n    \"12\",\n  ];\n  for (let x of months) {\n    if (!Object.keys(sortedPerMonth).includes(x)) sortedPerMonth[x] = 0;\n  }\n  const summedUp = Object.keys(sortedPerMonth)\n    .sort((a, b) => a - b)\n    .map((key) => {\n      if (!sortedPerMonth[key]) return sortedPerMonth[key];\n      else return findBalance(sortedPerMonth[key]);\n    });\n  let actualData = [];\n\n  for (let i = 0; i < summedUp.length; i++) {\n    let storage = 0;\n\n    for (let j = i; j >= 0; j--) {\n      storage += summedUp[j];\n    }\n    actualData.push(storage);\n  }\n  const data = {\n    labels: [\n      \"Jan\",\n      \"Feb\",\n      \"Mar\",\n      \"Apr\",\n      \"May\",\n      \"Jun\",\n      \"Jul\",\n      \"Aug\",\n      \"Sep\",\n      \"Oct\",\n      \"Dec\",\n    ],\n    datasets: [\n      {\n        label: \"My First Dataset\",\n        data: actualData,\n        fill: false,\n        borderColor: \"rgb(75, 192, 192)\",\n        tension: 0.1,\n      },\n    ],\n  };\n  const options = {\n    responsive: true,\n    maintainAspectRatio: true,\n  };\n  return <Line options={options} data={data} />;\n};\n\nexport default YearChart;\n"],"names":["$cb684dd0f8de06e7$export$2e2bcd8739ae039","invoices","companies","reduce","acc","currentValue","find","el","id","company","status","amount","findBalance","invoicesArray","current","sortInvoicesPerYear","buckets","invoice","received","slice","push","$7C6UD","jsx","className","Object","keys","sort","a","b","map","key","jsxs","filter","paid","length","$6AO7m","default","$3jKM1","Chart","register","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","$a2fd09e91c8a8b9f$export$2e2bcd8739ae039","sortedPerMonth","Date","getFullYear","months","x","includes","summedUp","actualData","i","storage","j","data","labels","datasets","label","fill","borderColor","tension","$5MDbd","Line","options","responsive","maintainAspectRatio"],"version":3,"file":"Reports.9a216449.js.map"}