{"mappings":"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","sources":["src/components/contacts/Contacts.jsx","src/logic/dateFormatter.js"],"sourcesContent":["import { useMemo, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useTable, useSortBy, useFilters } from \"react-table\";\nimport SelectFilter from \"../reusables/SelectFilter\";\nimport { dateFormatter } from \"../../logic/dateFormatter\";\nimport { ToastContainer, toast } from \"react-toastify\";\n\nfunction Contacts({ contacts, companies }) {\n  useEffect(() => {\n    const message = sessionStorage.getItem(\"cogipToast\");\n    if (!message) return;\n    toast.success(message, {\n      position: toast.POSITION.BOTTOM_RIGHT,\n    });\n    sessionStorage.removeItem(\"cogipToast\");\n  }, []);\n  const navigate = useNavigate();\n  const handleAdd = (e) => {\n    navigate(`/${e.target.id}`);\n  };\n\n  /* SETTING UP TABLE */\n  const data = useMemo(() => {\n    let results = [];\n    for (let contact of contacts) {\n      let obj = {\n        icon: <i className=\"fas fa-user\"></i>,\n        col1: `${contact.firstname} ${contact.lastname}`,\n        col2: contact.email,\n        col3: contact.phonenumber,\n        col4: companies.find((el) => el.id == contact.contactcompany).name,\n        col5: dateFormatter(contact.added),\n        id: contact.id,\n      };\n      results.push(obj);\n    }\n    return results;\n  }, [contacts]);\n  const columns = useMemo(\n    () => [\n      {\n        Header: \"\",\n        accessor: \"icon\",\n        className: \"contactIcon\",\n        disableSortBy: true,\n        disableFilters: true,\n      },\n      {\n        Header: \"Name\",\n        accessor: \"col1\",\n        className: \"contactName\",\n        disableFilters: true,\n      },\n      {\n        Header: \"Email\",\n        accessor: \"col2\",\n        className: \"contactEmail\",\n        disableFilters: true,\n      },\n      {\n        Header: \"Phone number\",\n        accessor: \"col3\",\n        className: \"contactPhonenumber\",\n        disableFilters: true,\n      },\n      {\n        Header: \"Company\",\n        accessor: \"col4\",\n        className: \"contactContactcompany\",\n        Filter: SelectFilter,\n        filter: \"includes\",\n      },\n      {\n        Header: \"Added\",\n        accessor: \"col5\",\n        className: \"contactAdded\",\n        disableFilters: true,\n      },\n      {\n        Header: \"ID\",\n        accessor: \"id\",\n        className: \"contactId\",\n        disableFilters: true,\n      },\n    ],\n    [contacts]\n  );\n  const { getTableProps, getTableBodyProps, headerGroups, rows, prepareRow } =\n    useTable(\n      {\n        columns,\n        data,\n        initialState: {\n          sortBy: [{ id: \"col1\", desc: false }],\n          hiddenColumns: [\"id\"],\n        },\n      },\n      useFilters,\n      useSortBy\n    );\n  const handleClick = (header, contactId, companyName) => {\n    switch (header) {\n      case \"Name\":\n        navigate(`/contact/${contactId}`);\n        break;\n      case \"Company\":\n        navigate(\n          `/company/${companies.find((el) => el.name == companyName).id}`\n        );\n        break;\n      default:\n        break;\n    }\n  };\n  return (\n    <main>\n      <section className=\"contacts card\">\n        <h2>\n          Contacts\n          <button\n            type=\"button\"\n            id=\"contactAdd\"\n            onClick={handleAdd}\n            style={{ padding: \"0 .5rem\" }}\n          >\n            +\n          </button>\n        </h2>\n\n        <table className=\"table\" {...getTableProps()}>\n          <thead>\n            {headerGroups.map((headerGroup) => (\n              <tr {...headerGroup.getHeaderGroupProps()}>\n                {headerGroup.headers.map((column) => (\n                  <th\n                    {...column.getHeaderProps(\n                      column.getSortByToggleProps({\n                        className: column.className,\n                      })\n                    )}\n                  >\n                    <div className=\"thContainer\">\n                      {column.render(\"Header\")}\n                      <span>\n                        {column.isSorted ? (\n                          column.isSortedDesc ? (\n                            <i className=\"fas fa-arrow-alt-circle-up sorted\"></i>\n                          ) : (\n                            <i className=\"fas fa-arrow-alt-circle-down sorted\"></i>\n                          )\n                        ) : (\n                          <i className=\"fas fa-arrow-alt-circle-down unSorted\"></i>\n                        )}\n                      </span>\n                    </div>\n                  </th>\n                ))}\n              </tr>\n            ))}\n            {headerGroups.map((headerGroup) => (\n              <tr\n                {...headerGroup.getHeaderGroupProps()}\n                className={\"filtersRow\"}\n              >\n                {headerGroup.headers.map((column) => (\n                  <th\n                    key={column.id}\n                    {...column.getHeaderProps({\n                      className: column.className,\n                    })}\n                  >\n                    <div className=\"filterContainer\">\n                      {column.canFilter ? column.render(\"Filter\") : null}\n                    </div>\n                  </th>\n                ))}\n              </tr>\n            ))}\n          </thead>\n          <tbody {...getTableBodyProps()}>\n            {rows.map((row) => {\n              prepareRow(row);\n              return (\n                <tr {...row.getRowProps()}>\n                  {row.cells.map((cell) => {\n                    return (\n                      <td\n                        {...cell.getCellProps({\n                          className: cell.column.className,\n                        })}\n                        onClick={() => {\n                          handleClick(\n                            cell.column.Header,\n                            cell.row.allCells[6].value,\n                            cell.row.allCells[4].value\n                          );\n                        }}\n                      >\n                        {cell.render(\"Cell\")}\n                      </td>\n                    );\n                  })}\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n      </section>\n      <ToastContainer />\n    </main>\n  );\n}\n\nexport default Contacts;\n","const dateFormatter = (dateInput) => {\n  const dateOutput = `${dateInput.slice(8, 10)}-${dateInput.slice(\n    5,\n    7\n  )}-${dateInput.slice(0, 4)}`;\n  return dateOutput;\n};\nexport { dateFormatter };\n"],"names":["$c7442cfed4f72f80$export$2e2bcd8739ae039","contacts","companies","$eCRxs","useEffect","message","sessionStorage","getItem","$dv2Dk","toast","success","position","POSITION","BOTTOM_RIGHT","removeItem","navigate","$kYfAi","useNavigate","data","useMemo","results","contact","obj","icon","$7C6UD","jsx","className","col1","firstname","lastname","col2","email","col3","phonenumber","col4","find","el","id","contactcompany","name","col5","$gXTmb","dateFormatter","added","push","columns","Header","accessor","disableSortBy","disableFilters","Filter","$bjE0N","default","filter","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","$3NGAg","useTable","initialState","sortBy","desc","hiddenColumns","useFilters","useSortBy","jsxs","type","onClick","e","target","style","padding","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","getSortByToggleProps","render","isSorted","isSortedDesc","canFilter","row","getRowProps","cells","cell","getCellProps","header","contactId","companyName","handleClick","allCells","value","ToastContainer","$c59d18b9d58e05d0$export$406508d2ca449bd","dateInput","slice"],"version":3,"file":"Contacts.17cb118b.js.map"}