{"mappings":"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","sources":["src/components/companies/CompanyAdd.jsx","src/logic/formValidation.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\nimport handleRequests from \"../../logic/handleRequests\";\nimport { companyVerify } from \"../../logic/formValidation\";\n\n// toaster\nimport { ToastContainer, toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport CompanyIllustration from \"../reusables/CompanyIllustration\";\n// end toaster\n\nfunction CompanyAdd({ setIsLoaded, isAuth }) {\n  const [isFetching, setIsFetching] = useState(false);\n  useEffect(() => {\n    const message = sessionStorage.getItem(\"cogipToast\");\n    if (!message) return;\n    const messageArray = message.split(\",\");\n    toast[messageArray[0]](messageArray[1], {\n      position: toast.POSITION.BOTTOM_RIGHT,\n    });\n    sessionStorage.removeItem(\"cogipToast\");\n  }, [isFetching]);\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setIsFetching(true);\n    const formData = {\n      country: e.target.country.value,\n      name: e.target.name.value,\n      status: e.target.status.value,\n      street: e.target.street.value,\n      streetnumber: e.target.streetnumber.value,\n      town: e.target.town.value,\n      vat: e.target.vat.value,\n      zip: e.target.zip.value,\n      contacts: [],\n    };\n    let check = companyVerify(formData);\n    if (check.ok) {\n      const { status, message, dataPackage } = await handleRequests(\n        \"POST\",\n        \"https://csharpproject.somee.com/api/Company\",\n        isAuth.jwt,\n        formData\n      );\n      if (status === 200)\n        sessionStorage.setItem(\"cogipToast\", \"success,Success !\");\n      else sessionStorage.setItem(\"cogipToast\", `error,${message}`);\n      setTimeout(() => {\n        setIsLoaded(false);\n        setIsFetching(false);\n      }, 1000);\n    } else {\n      setIsFetching(false);\n      const issues = Object.keys(check);\n      setTimeout(() => {\n        for (let issue of issues) {\n          if (issue !== \"ok\") {\n            toast.error(check[issue], {\n              position: toast.POSITION.BOTTOM_RIGHT,\n            });\n          }\n        }\n      }, 250);\n    }\n  };\n  return (\n    <main>\n      <div className=\"companyAdd card\">\n        <h2>Fill up the form</h2>\n        <form className=\"companyForm\" onSubmit={handleSubmit} method=\"post\">\n          <div className=\"formContent\">\n            <fieldset>\n              <legend>Company details</legend>\n              <div>\n                <label htmlFor=\"name\">Name : </label>\n                <input\n                  name=\"name\"\n                  type=\"text\"\n                  placeholder=\"Ex : BeCode\"\n                  required\n                />\n              </div>\n              <div>\n                <label htmlFor=\"vat\">VAT : </label>\n                <input\n                  name=\"vat\"\n                  type=\"text\"\n                  placeholder=\"Ex : 1235431658\"\n                  required\n                />\n              </div>\n              <div>\n                <label htmlFor=\"status\">Status : </label>\n                <select name=\"status\" required>\n                  <option value=\"\">Select a status</option>\n                  <option value=\"Supplier\">Supplier</option>\n                  <option value=\"Customer\">Customer</option>\n                </select>\n              </div>\n            </fieldset>\n            <fieldset>\n              <legend>Address</legend>\n              <div>\n                <label htmlFor=\"streetnumber\">Streetnumber : </label>\n                <input\n                  type=\"text\"\n                  name=\"streetnumber\"\n                  id=\"streetnumber\"\n                  required\n                />\n              </div>\n              <div>\n                <label htmlFor=\"street\">Street : </label>\n                <input type=\"text\" name=\"street\" id=\"street\" required />\n              </div>\n              <div>\n                <label htmlFor=\"town\">Town : </label>\n                <input type=\"text\" name=\"town\" id=\"town\" required />\n              </div>\n              <div>\n                <label htmlFor=\"country\">Country : </label>\n                <input type=\"text\" name=\"country\" id=\"country\" required />\n              </div>\n              <div>\n                <label htmlFor=\"zip\">Zip : </label>\n                <input type=\"text\" name=\"zip\" id=\"zip\" />\n              </div>\n            </fieldset>\n          </div>\n          <button>Submit</button>\n        </form>\n        <div className=\"formIllu\">\n          <CompanyIllustration />\n        </div>\n        <ToastContainer />\n      </div>\n      {isFetching ? (\n        <div className=\"fetching dark\">\n          <div className=\"lds-dual-ring\"></div>\n        </div>\n      ) : null}\n    </main>\n  );\n}\n\nexport default CompanyAdd;\n","const invoiceVerify = (dataToVerify) => {\n  let response = {};\n  if (!dataToVerify.reference) response.reference = \"Please enter a reference\";\n  if (!dataToVerify.company) response.company = \"Please select a company\";\n  if (!dataToVerify.amount) response.amount = \"Please enter an amount\";\n  if (!dataToVerify.received) response.received = \"Please select a date\";\n  if (dataToVerify.paidStatus !== false && dataToVerify.paidStatus !== true)\n    response.paid = \"Please select a paid status\";\n  response.ok = Object.keys(response).length > 0 ? false : true;\n  return response;\n};\nconst contactVerify = (dataToVerify) => {\n  let response = {};\n  if (!dataToVerify.firstname) response.firstname = \"Please enter a firstname\";\n  if (!dataToVerify.lastname) response.lastname = \"Please enter a lastname\";\n  if (!dataToVerify.companies) response.companies = \"Please select a contact\";\n  if (!dataToVerify.email) response.email = \"Please enter an email\";\n  if (!dataToVerify.phonenumber)\n    response.phonenumber = \"Please enter a phone number\";\n  response.ok = Object.keys(response).length > 0 ? false : true;\n  return response;\n};\n\nconst companyVerify = (dataToVerify) => {\n  let response = {};\n  if (!dataToVerify.name) response.name = \"Please enter a name\";\n  if (!dataToVerify.vat) response.vat = \"Please enter a vat number\";\n  if (!dataToVerify.town) response.town = \"Please enter a town\";\n  if (!dataToVerify.street) response.street = \"Please enter a street\";\n  if (!dataToVerify.streetnumber)\n    response.streetnumber = \"Please enter a street number\";\n  if (!dataToVerify.country) response.country = \"Please enter a country\";\n  if (!dataToVerify.status) response.status = \"Please select a status\";\n  response.ok = Object.keys(response).length > 0 ? false : true;\n  return response;\n};\n\nexport { invoiceVerify, contactVerify, companyVerify };\n"],"names":["$18dd121f13565d87$export$2e2bcd8739ae039","setIsLoaded","isAuth","isFetching","setIsFetching","$eCRxs","useState","useEffect","message","sessionStorage","getItem","messageArray","split","$dv2Dk","toast","position","POSITION","BOTTOM_RIGHT","removeItem","$7C6UD","jsxs","className","onSubmit","async","e","preventDefault","formData","country","target","value","name","status","street","streetnumber","town","vat","zip","contacts","check","$5H5kc","companyVerify","ok","dataPackage","$9aCo1","default","jwt","setItem","setTimeout","issues","Object","keys","issue","error","method","htmlFor","type","placeholder","required","id","$6P85y","ToastContainer","jsx","$42551951195d288c$export$7e6a64f84fea9213","dataToVerify","response","reference","company","amount","received","paidStatus","paid","length","$42551951195d288c$export$9204046200024146","firstname","lastname","companies","email","phonenumber","$42551951195d288c$export$927967c6383eee08"],"version":3,"file":"CompanyAdd.c507a9b0.js.map"}