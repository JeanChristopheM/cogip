{"mappings":"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","sources":["src/components/contacts/Contacts.jsx","src/logic/dateFormatter.js"],"sourcesContent":["import { useMemo, useEffect } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { useTable, useSortBy, useFilters } from \"react-table\";\r\nimport SelectFilter from \"../reusables/SelectFilter\";\r\nimport { dateFormatter } from \"../../logic/dateFormatter\";\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\n\r\nfunction Contacts({ contacts, companies }) {\r\n  useEffect(() => {\r\n    const message = sessionStorage.getItem(\"cogipToast\");\r\n    if (!message) return;\r\n    toast.success(message, {\r\n      position: toast.POSITION.BOTTOM_RIGHT,\r\n    });\r\n    sessionStorage.removeItem(\"cogipToast\");\r\n  }, []);\r\n  const navigate = useNavigate();\r\n  const handleAdd = (e) => {\r\n    navigate(`/${e.target.id}`);\r\n  };\r\n\r\n  /* SETTING UP TABLE */\r\n  const data = useMemo(() => {\r\n    let results = [];\r\n    for (let contact of contacts) {\r\n      let obj = {\r\n        icon: <i className=\"fas fa-user\"></i>,\r\n        col1: `${contact.firstname} ${contact.lastname}`,\r\n        col2: contact.email,\r\n        col3: contact.phonenumber,\r\n        col4:\r\n          contact.companies.length === 0\r\n            ? \"None\"\r\n            : contact.companies.length === 1\r\n            ? companies.find((el) => el.id == contact.companies[0]).name\r\n            : companies\r\n                .filter((el) => {\r\n                  if (contact.companies.includes(el.id)) return el;\r\n                })\r\n                .reduce((acc, current) => {\r\n                  return (acc += current.name + \", \");\r\n                }, \"\")\r\n                .slice(0, -2),\r\n        col5: dateFormatter(contact.added),\r\n        id: contact.id,\r\n      };\r\n      results.push(obj);\r\n    }\r\n    return results;\r\n  }, [contacts]);\r\n  const columns = useMemo(\r\n    () => [\r\n      {\r\n        Header: \"\",\r\n        accessor: \"icon\",\r\n        className: \"contactIcon\",\r\n        disableSortBy: true,\r\n        disableFilters: true,\r\n      },\r\n      {\r\n        Header: \"Name\",\r\n        accessor: \"col1\",\r\n        className: \"contactName\",\r\n        disableFilters: true,\r\n      },\r\n      {\r\n        Header: \"Email\",\r\n        accessor: \"col2\",\r\n        className: \"contactEmail\",\r\n        disableFilters: true,\r\n      },\r\n      {\r\n        Header: \"Phone number\",\r\n        accessor: \"col3\",\r\n        className: \"contactPhonenumber\",\r\n        disableFilters: true,\r\n      },\r\n      {\r\n        Header: \"Company\",\r\n        accessor: \"col4\",\r\n        className: \"contactContactcompany\",\r\n        Filter: SelectFilter,\r\n        filter: \"includes\",\r\n      },\r\n      {\r\n        Header: \"Added\",\r\n        accessor: \"col5\",\r\n        className: \"contactAdded\",\r\n        disableFilters: true,\r\n      },\r\n      {\r\n        Header: \"ID\",\r\n        accessor: \"id\",\r\n        className: \"contactId\",\r\n        disableFilters: true,\r\n      },\r\n    ],\r\n    [contacts]\r\n  );\r\n  const { getTableProps, getTableBodyProps, headerGroups, rows, prepareRow } =\r\n    useTable(\r\n      {\r\n        columns,\r\n        data,\r\n        initialState: {\r\n          sortBy: [{ id: \"col1\", desc: false }],\r\n          hiddenColumns: [\"id\"],\r\n        },\r\n      },\r\n      useFilters,\r\n      useSortBy\r\n    );\r\n  const handleClick = (header, contactId, companyName) => {\r\n    switch (header) {\r\n      case \"Name\":\r\n        navigate(`/contact/${contactId}`);\r\n        break;\r\n      case \"Company\":\r\n        if (companyName.includes(\",\")) return;\r\n        navigate(\r\n          `/company/${companies.find((el) => el.name == companyName).id}`\r\n        );\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n  return (\r\n    <main>\r\n      <section className=\"contacts card\">\r\n        <h2>\r\n          Contacts\r\n          <button\r\n            type=\"button\"\r\n            id=\"contactAdd\"\r\n            onClick={handleAdd}\r\n            style={{ padding: \"0 .5rem\" }}\r\n          >\r\n            +\r\n          </button>\r\n        </h2>\r\n\r\n        <table className=\"table\" {...getTableProps()}>\r\n          <thead>\r\n            {headerGroups.map((headerGroup) => (\r\n              <tr {...headerGroup.getHeaderGroupProps()}>\r\n                {headerGroup.headers.map((column) => (\r\n                  <th\r\n                    {...column.getHeaderProps(\r\n                      column.getSortByToggleProps({\r\n                        className: column.className,\r\n                      })\r\n                    )}\r\n                  >\r\n                    <div className=\"thContainer\">\r\n                      {column.render(\"Header\")}\r\n                      <span>\r\n                        {column.isSorted ? (\r\n                          column.isSortedDesc ? (\r\n                            <i className=\"fas fa-arrow-alt-circle-up sorted\"></i>\r\n                          ) : (\r\n                            <i className=\"fas fa-arrow-alt-circle-down sorted\"></i>\r\n                          )\r\n                        ) : (\r\n                          <i className=\"fas fa-arrow-alt-circle-down unSorted\"></i>\r\n                        )}\r\n                      </span>\r\n                    </div>\r\n                  </th>\r\n                ))}\r\n              </tr>\r\n            ))}\r\n            {headerGroups.map((headerGroup) => (\r\n              <tr\r\n                {...headerGroup.getHeaderGroupProps()}\r\n                className={\"filtersRow\"}\r\n              >\r\n                {headerGroup.headers.map((column) => (\r\n                  <th\r\n                    key={column.id}\r\n                    {...column.getHeaderProps({\r\n                      className: column.className,\r\n                    })}\r\n                  >\r\n                    <div className=\"filterContainer\">\r\n                      {column.canFilter ? column.render(\"Filter\") : null}\r\n                    </div>\r\n                  </th>\r\n                ))}\r\n              </tr>\r\n            ))}\r\n          </thead>\r\n          <tbody {...getTableBodyProps()}>\r\n            {rows.map((row) => {\r\n              prepareRow(row);\r\n              return (\r\n                <tr {...row.getRowProps()}>\r\n                  {row.cells.map((cell) => {\r\n                    return (\r\n                      <td\r\n                        {...cell.getCellProps({\r\n                          className: cell.column.className,\r\n                        })}\r\n                        onClick={() => {\r\n                          handleClick(\r\n                            cell.column.Header,\r\n                            cell.row.allCells[6].value,\r\n                            cell.row.allCells[4].value\r\n                          );\r\n                        }}\r\n                      >\r\n                        {cell.render(\"Cell\")}\r\n                      </td>\r\n                    );\r\n                  })}\r\n                </tr>\r\n              );\r\n            })}\r\n          </tbody>\r\n        </table>\r\n      </section>\r\n      <ToastContainer />\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default Contacts;\r\n","const dateFormatter = (dateInput) => {\r\n  const dateOutput = `${dateInput.slice(8, 10)}-${dateInput.slice(\r\n    5,\r\n    7\r\n  )}-${dateInput.slice(0, 4)}`;\r\n  return dateOutput;\r\n};\r\nexport { dateFormatter };\r\n"],"names":["$c7442cfed4f72f80$export$2e2bcd8739ae039","contacts","companies","$eCRxs","useEffect","message","sessionStorage","getItem","$dv2Dk","toast","success","position","POSITION","BOTTOM_RIGHT","removeItem","navigate","$kYfAi","useNavigate","data","useMemo","results","contact","obj","icon","$7C6UD","jsx","className","col1","firstname","lastname","col2","email","col3","phonenumber","col4","length","find","el","id","name","filter","includes","reduce","acc","current","slice","col5","$gXTmb","dateFormatter","added","push","columns","Header","accessor","disableSortBy","disableFilters","Filter","$bjE0N","default","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","$3NGAg","useTable","initialState","sortBy","desc","hiddenColumns","useFilters","useSortBy","jsxs","type","onClick","e","target","style","padding","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","getSortByToggleProps","render","isSorted","isSortedDesc","canFilter","row","getRowProps","cells","cell","getCellProps","header","contactId","companyName","handleClick","allCells","value","ToastContainer","$c59d18b9d58e05d0$export$406508d2ca449bd","dateInput"],"version":3,"file":"Contacts.33b6b1e5.js.map"}