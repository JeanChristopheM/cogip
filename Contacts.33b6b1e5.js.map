{"mappings":"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","sources":["src/components/contacts/Contacts.jsx","src/logic/dateFormatter.js"],"sourcesContent":["import { useMemo, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useTable, useSortBy, useFilters } from \"react-table\";\nimport SelectFilter from \"../reusables/SelectFilter\";\nimport { dateFormatter } from \"../../logic/dateFormatter\";\nimport { ToastContainer, toast } from \"react-toastify\";\n\nfunction Contacts({ contacts, companies }) {\n  useEffect(() => {\n    const message = sessionStorage.getItem(\"cogipToast\");\n    if (!message) return;\n    toast.success(message, {\n      position: toast.POSITION.BOTTOM_RIGHT,\n    });\n    sessionStorage.removeItem(\"cogipToast\");\n  }, []);\n  const navigate = useNavigate();\n  const handleAdd = (e) => {\n    navigate(`/${e.target.id}`);\n  };\n\n  /* SETTING UP TABLE */\n  const data = useMemo(() => {\n    let results = [];\n    for (let contact of contacts) {\n      let obj = {\n        icon: <i className=\"fas fa-user\"></i>,\n        col1: `${contact.firstname} ${contact.lastname}`,\n        col2: contact.email,\n        col3: contact.phonenumber,\n        col4:\n          contact.companies.length === 0\n            ? \"None\"\n            : contact.companies.length === 1\n            ? companies.find((el) => el.id == contact.companies[0]).name\n            : companies\n                .filter((el) => {\n                  if (contact.companies.includes(el.id)) return el;\n                })\n                .reduce((acc, current) => {\n                  return (acc += current.name + \", \");\n                }, \"\")\n                .slice(0, -2),\n        col5: dateFormatter(contact.added),\n        id: contact.id,\n      };\n      results.push(obj);\n    }\n    return results;\n  }, [contacts]);\n  const columns = useMemo(\n    () => [\n      {\n        Header: \"\",\n        accessor: \"icon\",\n        className: \"contactIcon\",\n        disableSortBy: true,\n        disableFilters: true,\n      },\n      {\n        Header: \"Name\",\n        accessor: \"col1\",\n        className: \"contactName\",\n        disableFilters: true,\n      },\n      {\n        Header: \"Email\",\n        accessor: \"col2\",\n        className: \"contactEmail\",\n        disableFilters: true,\n      },\n      {\n        Header: \"Phone number\",\n        accessor: \"col3\",\n        className: \"contactPhonenumber\",\n        disableFilters: true,\n      },\n      {\n        Header: \"Company\",\n        accessor: \"col4\",\n        className: \"contactContactcompany\",\n        Filter: SelectFilter,\n        filter: \"includes\",\n      },\n      {\n        Header: \"Added\",\n        accessor: \"col5\",\n        className: \"contactAdded\",\n        disableFilters: true,\n      },\n      {\n        Header: \"ID\",\n        accessor: \"id\",\n        className: \"contactId\",\n        disableFilters: true,\n      },\n    ],\n    [contacts]\n  );\n  const { getTableProps, getTableBodyProps, headerGroups, rows, prepareRow } =\n    useTable(\n      {\n        columns,\n        data,\n        initialState: {\n          sortBy: [{ id: \"col1\", desc: false }],\n          hiddenColumns: [\"id\"],\n        },\n      },\n      useFilters,\n      useSortBy\n    );\n  const handleClick = (header, contactId, companyName) => {\n    switch (header) {\n      case \"Name\":\n        navigate(`/contact/${contactId}`);\n        break;\n      case \"Company\":\n        if (companyName.includes(\",\")) return;\n        navigate(\n          `/company/${companies.find((el) => el.name == companyName).id}`\n        );\n        break;\n      default:\n        break;\n    }\n  };\n  return (\n    <main>\n      <section className=\"contacts card\">\n        <h2>\n          Contacts\n          <button\n            type=\"button\"\n            id=\"contactAdd\"\n            onClick={handleAdd}\n            style={{ padding: \"0 .5rem\" }}\n          >\n            +\n          </button>\n        </h2>\n\n        <table className=\"table\" {...getTableProps()}>\n          <thead>\n            {headerGroups.map((headerGroup) => (\n              <tr {...headerGroup.getHeaderGroupProps()}>\n                {headerGroup.headers.map((column) => (\n                  <th\n                    {...column.getHeaderProps(\n                      column.getSortByToggleProps({\n                        className: column.className,\n                      })\n                    )}\n                  >\n                    <div className=\"thContainer\">\n                      {column.render(\"Header\")}\n                      <span>\n                        {column.isSorted ? (\n                          column.isSortedDesc ? (\n                            <i className=\"fas fa-arrow-alt-circle-up sorted\"></i>\n                          ) : (\n                            <i className=\"fas fa-arrow-alt-circle-down sorted\"></i>\n                          )\n                        ) : (\n                          <i className=\"fas fa-arrow-alt-circle-down unSorted\"></i>\n                        )}\n                      </span>\n                    </div>\n                  </th>\n                ))}\n              </tr>\n            ))}\n            {headerGroups.map((headerGroup) => (\n              <tr\n                {...headerGroup.getHeaderGroupProps()}\n                className={\"filtersRow\"}\n              >\n                {headerGroup.headers.map((column) => (\n                  <th\n                    key={column.id}\n                    {...column.getHeaderProps({\n                      className: column.className,\n                    })}\n                  >\n                    <div className=\"filterContainer\">\n                      {column.canFilter ? column.render(\"Filter\") : null}\n                    </div>\n                  </th>\n                ))}\n              </tr>\n            ))}\n          </thead>\n          <tbody {...getTableBodyProps()}>\n            {rows.map((row) => {\n              prepareRow(row);\n              return (\n                <tr {...row.getRowProps()}>\n                  {row.cells.map((cell) => {\n                    return (\n                      <td\n                        {...cell.getCellProps({\n                          className: cell.column.className,\n                        })}\n                        onClick={() => {\n                          handleClick(\n                            cell.column.Header,\n                            cell.row.allCells[6].value,\n                            cell.row.allCells[4].value\n                          );\n                        }}\n                      >\n                        {cell.render(\"Cell\")}\n                      </td>\n                    );\n                  })}\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n      </section>\n      <ToastContainer />\n    </main>\n  );\n}\n\nexport default Contacts;\n","const dateFormatter = (dateInput) => {\n  const dateOutput = `${dateInput.slice(8, 10)}-${dateInput.slice(\n    5,\n    7\n  )}-${dateInput.slice(0, 4)}`;\n  return dateOutput;\n};\nexport { dateFormatter };\n"],"names":["$c7442cfed4f72f80$export$2e2bcd8739ae039","contacts","companies","$eCRxs","useEffect","message","sessionStorage","getItem","$dv2Dk","toast","success","position","POSITION","BOTTOM_RIGHT","removeItem","navigate","$kYfAi","useNavigate","data","useMemo","results","contact","obj","icon","$7C6UD","jsx","className","col1","firstname","lastname","col2","email","col3","phonenumber","col4","length","find","el","id","name","filter","includes","reduce","acc","current","slice","col5","$gXTmb","dateFormatter","added","push","columns","Header","accessor","disableSortBy","disableFilters","Filter","$bjE0N","default","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","$3NGAg","useTable","initialState","sortBy","desc","hiddenColumns","useFilters","useSortBy","jsxs","type","onClick","e","target","style","padding","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","getSortByToggleProps","render","isSorted","isSortedDesc","canFilter","row","getRowProps","cells","cell","getCellProps","header","contactId","companyName","handleClick","allCells","value","ToastContainer","$c59d18b9d58e05d0$export$406508d2ca449bd","dateInput"],"version":3,"file":"Contacts.33b6b1e5.js.map"}