{"mappings":"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","sources":["src/components/contacts/Contact.jsx","src/components/contacts/ContactControls.jsx","src/components/reusables/CompanySelector.jsx","src/logic/formValidation.js"],"sourcesContent":["import { useState, useRef, useEffect } from \"react\";\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport ContactControls from \"./ContactControls.jsx\";\nimport CompanySelector from \"../reusables/CompanySelector.jsx\";\nimport handleRequests from \"../../logic/handleRequests\";\nimport { contactVerify } from \"../../logic/formValidation\";\nimport ContactIllustration from \"../reusables/ContactIllustration.jsx\";\n\n// toaster\nimport { ToastContainer, toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\n// end toaster\n\nfunction Contact({ contacts, companies, setIsLoaded, isAuth }) {\n  const loaded = contacts.length > 0 ? true : false;\n  const params = useParams();\n  const navigate = useNavigate();\n  const contact = contacts.find((el) => el.id == params.contactId);\n  const company = contact\n    ? companies.find((el) => el.id == contact.companies[0])\n    : null;\n  const [selectedCompany, setSelectedCompany] = useState(company);\n  const [isModifying, setIsModifying] = useState(false);\n  const [isDeleting, setIsDeleting] = useState(false);\n  const [isFetching, setIsFetching] = useState(false);\n\n  useEffect(() => {\n    if (!contact) navigate(\"/contacts\");\n  }, [contacts]);\n\n  const firstnameRef = useRef();\n  const lastnameRef = useRef();\n  const emailRef = useRef();\n  const phonenumberRef = useRef();\n  const handleCompanyChange = (company) => {\n    setSelectedCompany(company);\n  };\n  const handleModif = async () => {\n    setIsFetching(true);\n    const formData = {\n      firstname: firstnameRef.current.value,\n      lastname: lastnameRef.current.value,\n      companies: selectedCompany.id.toString(),\n      email: emailRef.current.value,\n      phonenumber: phonenumberRef.current.value,\n    };\n    console.log(formData);\n    /* let check = contactVerify(formData);\n    if (check.ok) {\n      const { status, message, dataPackage } = await handleRequests(\n        \"PUT\",\n        `https://csharpproject.somee.com/api/contact/${params.contactId}`,\n        isAuth.jwt,\n        formData\n      );\n      setIsLoaded(false);\n      setIsFetching(false);\n      if (status === 200) {\n        setTimeout(() => {\n          toast.success(message, {\n            position: toast.POSITION.BOTTOM_RIGHT,\n          });\n        }, 250);\n      } else {\n        setTimeout(() => {\n          toast.error(message, {\n            position: toast.POSITION.BOTTOM_RIGHT,\n          });\n        }, 250);\n      }\n    } else {\n      setIsFetching(false);\n      const issues = Object.keys(check);\n      setTimeout(() => {\n        for (let issue of issues) {\n          if (issue !== \"ok\") {\n            toast.error(check[issue], {\n              position: toast.POSITION.BOTTOM_RIGHT,\n            });\n          }\n        }\n      }, 250);\n    } */\n  };\n  const handleDelete = async () => {\n    setIsFetching(true);\n    const { status, message } = await handleRequests(\n      \"DELETE\",\n      `https://csharpproject.somee.com/api/Contact/${contact.id}`,\n      isAuth.jwt\n    );\n    setIsFetching(false);\n    if (status !== 200) {\n      toast.error(\"There was an error deleting this contact\", {\n        position: toast.POSITION.BOTTOM_RIGHT,\n      });\n    }\n    sessionStorage.setItem(\"cogipToast\", \"Success !\");\n    setIsDeleting(false);\n    setIsLoaded(false);\n  };\n  return (\n    <main>\n      {isFetching || !loaded || !contact ? (\n        <div className=\"fetching\">\n          <div className=\"lds-dual-ring\"></div>\n        </div>\n      ) : (\n        <div className=\"card\">\n          <h2>Details :</h2>\n          {isModifying ? (\n            <form className=\"contactGrid\">\n              <section className=\"contactGrid__section\">\n                <h3>Contact</h3>\n                <div className=\"contactGrid__section--child infos\">\n                  <label htmlFor=\"contactFirstname\" className=\"labels\">\n                    Firstname :{\" \"}\n                  </label>\n                  <input\n                    type=\"text\"\n                    id=\"contactFirstname\"\n                    name=\"contactFirstname\"\n                    defaultValue={contact.firstname}\n                    ref={firstnameRef}\n                  />\n                </div>\n                <div className=\"contactGrid__section--child infos\">\n                  <label htmlFor=\"contactLastname\" className=\"labels\">\n                    Lastname :{\" \"}\n                  </label>\n                  <input\n                    type=\"text\"\n                    id=\"contactLastname\"\n                    name=\"contactLastname\"\n                    defaultValue={contact.lastname}\n                    ref={lastnameRef}\n                  />\n                </div>\n                <div className=\"contactGrid__section--child infos\">\n                  <label htmlFor=\"contactEmail\" className=\"labels\">\n                    Email :{\" \"}\n                  </label>\n                  <input\n                    type=\"text\"\n                    id=\"contactEmail\"\n                    name=\"contactEmail\"\n                    defaultValue={contact.email}\n                    ref={emailRef}\n                  />\n                </div>\n                <div className=\"contactGrid__section--child infos\">\n                  <label htmlFor=\"contactPhonenumber\" className=\"labels\">\n                    Phone number :{\" \"}\n                  </label>\n                  <input\n                    type=\"text\"\n                    id=\"contactPhonenumber\"\n                    name=\"contactPhonenumber\"\n                    defaultValue={contact.phonenumber}\n                    ref={phonenumberRef}\n                  />\n                </div>\n              </section>\n\n              <section className=\"contactGrid__section\">\n                <h3>From</h3>\n                <CompanySelector\n                  currentCompany={company}\n                  companies={companies}\n                  name={\"contactCompany\"}\n                  handleCompanyChange={handleCompanyChange}\n                />\n              </section>\n              <section className=\"decoration\">\n                <ContactIllustration />\n              </section>\n            </form>\n          ) : (\n            <div className=\"contactGrid\">\n              <section className=\"contactGrid__section\">\n                <h3>Contact</h3>\n                <div className=\"contactGrid__section--child infos\">\n                  <span className=\"labels\">Firstname : </span>\n                  <span id=\"contactFirstname\" className=\"bigger\">\n                    {contact.firstname}\n                  </span>\n                </div>\n                <div className=\"contactGrid__section--child infos\">\n                  <span className=\"labels\">Lastname : </span>\n                  <span id=\"contactLastname\" className=\"bigger\">\n                    {contact.lastname}\n                  </span>\n                </div>\n                <div className=\"contactGrid__section--child infos\">\n                  <span className=\"labels\">Email : </span>\n                  <span id=\"contactEmail\">{contact.email}</span>\n                </div>\n                <div className=\"contactGrid__section--child infos\">\n                  <span className=\"labels\">Phone number : </span>\n                  <span id=\"contactPhonenumber\">{contact.phonenumber}</span>\n                </div>\n              </section>\n              <section className=\"contactGrid__section\">\n                <h3>From</h3>\n                <div className=\"contactGrid__section--child\">\n                  <div className=\"companyContainer\">\n                    {companies.map((el) => {\n                      if (contact.companies.includes(el.id))\n                        return (\n                          <div className=\"companyCard\" key={el.id}>\n                            <p\n                              id=\"contactCompany\"\n                              onClick={() => {\n                                navigate(`/company/${el.id}`);\n                              }}\n                              style={{ cursor: \"pointer\" }}\n                              key={el.id}\n                            >\n                              {el.name}\n                            </p>\n                          </div>\n                        );\n                    })}\n                  </div>\n                </div>\n              </section>\n              <section className=\"decoration\">\n                <ContactIllustration />\n              </section>\n            </div>\n          )}\n\n          {isAuth.role == \"Admin\" ? (\n            <ContactControls\n              isModifying={isModifying}\n              setIsModifying={setIsModifying}\n              isDeleting={isDeleting}\n              setIsDeleting={setIsDeleting}\n              handleModif={handleModif}\n              handleDelete={handleDelete}\n            />\n          ) : (\n            \"\"\n          )}\n        </div>\n      )}\n      <ToastContainer />\n    </main>\n  );\n}\n\nexport default Contact;\n","function ContactControls({\n  isModifying,\n  isDeleting,\n  setIsModifying,\n  setIsDeleting,\n  handleModif,\n  handleDelete,\n}) {\n  if (isModifying) {\n    return (\n      <div className={\"contactControls\"}>\n        <button type=\"button\" onClick={handleModif}>\n          Submit\n        </button>\n        <button\n          type=\"button\"\n          onClick={() => {\n            setIsModifying(false);\n          }}\n        >\n          Cancel\n        </button>\n      </div>\n    );\n  }\n  if (isDeleting) {\n    return (\n      <div className={\"contactControls\"}>\n        <button type=\"button\" onClick={handleDelete}>\n          Confirm\n        </button>\n        <button\n          type=\"button\"\n          onClick={() => {\n            setIsDeleting(false);\n          }}\n        >\n          Cancel\n        </button>\n      </div>\n    );\n  }\n  return (\n    <div className={\"contactControls\"}>\n      <button\n        type=\"button\"\n        onClick={() => {\n          setIsModifying(true);\n        }}\n      >\n        Modify\n      </button>\n      <button\n        type=\"button\"\n        onClick={() => {\n          setIsDeleting(true);\n        }}\n      >\n        Delete\n      </button>\n    </div>\n  );\n}\n\nexport default ContactControls;\n","function CompanySelector({\n  companies,\n  handleCompanyChange,\n  currentCompany,\n  name,\n}) {\n  return (\n    <select\n      onChange={(e) => {\n        let company = companies.find((el) => el.name == e.target.value)\n          ? companies.find((el) => el.name == e.target.value)\n          : \"\";\n        handleCompanyChange(company);\n      }}\n      defaultValue={currentCompany.name}\n      name={name}\n      required\n    >\n      <option value=\"\">Select a company</option>\n      {companies.map((company) => {\n        return (\n          <option value={company.name} key={company.id}>\n            {company.name}\n          </option>\n        );\n      })}\n    </select>\n  );\n}\n\nexport default CompanySelector;\n","const invoiceVerify = (dataToVerify) => {\n  let response = {};\n  if (!dataToVerify.reference) response.reference = \"Please enter a reference\";\n  if (!dataToVerify.company) response.company = \"Please select a company\";\n  if (!dataToVerify.amount) response.amount = \"Please enter an amount\";\n  if (!dataToVerify.received) response.received = \"Please select a date\";\n  if (dataToVerify.paidStatus !== false && dataToVerify.paidStatus !== true)\n    response.paid = \"Please select a paid status\";\n  response.ok = Object.keys(response).length > 0 ? false : true;\n  return response;\n};\nconst contactVerify = (dataToVerify) => {\n  let response = {};\n  if (!dataToVerify.firstname) response.firstname = \"Please enter a firstname\";\n  if (!dataToVerify.lastname) response.lastname = \"Please enter a lastname\";\n  if (!dataToVerify.companies) response.companies = \"Please select a contact\";\n  if (!dataToVerify.email) response.email = \"Please enter an email\";\n  if (!dataToVerify.phonenumber)\n    response.phonenumber = \"Please enter a phone number\";\n  response.ok = Object.keys(response).length > 0 ? false : true;\n  return response;\n};\n\nconst companyVerify = (dataToVerify) => {\n  let response = {};\n  if (!dataToVerify.name) response.name = \"Please enter a name\";\n  if (!dataToVerify.vat) response.vat = \"Please enter a vat number\";\n  if (!dataToVerify.town) response.town = \"Please enter a town\";\n  if (!dataToVerify.street) response.street = \"Please enter a street\";\n  if (!dataToVerify.streetnumber)\n    response.streetnumber = \"Please enter a street number\";\n  if (!dataToVerify.country) response.country = \"Please enter a country\";\n  if (!dataToVerify.status) response.status = \"Please select a status\";\n  response.ok = Object.keys(response).length > 0 ? false : true;\n  return response;\n};\n\nexport { invoiceVerify, contactVerify, companyVerify };\n"],"names":["$b8b37f0a6f9246e4$export$2e2bcd8739ae039","contacts","companies","setIsLoaded","isAuth","loaded","length","params","$kYfAi","useParams","navigate","useNavigate","contact","find","el","id","contactId","company1","selectedCompany","setSelectedCompany","$eCRxs","useState","isModifying","setIsModifying","isDeleting","setIsDeleting","isFetching","setIsFetching","useEffect","firstnameRef","useRef","lastnameRef","emailRef","phonenumberRef","$7C6UD","jsxs","className","htmlFor","type","name","defaultValue","firstname","ref","lastname","email","phonenumber","$4yknE","default","currentCompany","handleCompanyChange","company","$3Ui4D","map","includes","jsx","onClick","style","cursor","role","$9jFXu","handleModif","async","formData","current","value","toString","console","log","handleDelete","status","message","$9aCo1","jwt","$dv2Dk","toast","error","position","POSITION","BOTTOM_RIGHT","sessionStorage","setItem","ToastContainer","$5ed51abd9418945a$export$2e2bcd8739ae039","$27c888b5041dae3c$export$2e2bcd8739ae039","onChange","e","target","required","$42551951195d288c$export$7e6a64f84fea9213","dataToVerify","response","reference","amount","received","paidStatus","paid","ok","Object","keys","$42551951195d288c$export$9204046200024146","$42551951195d288c$export$927967c6383eee08","vat","town","street","streetnumber","country"],"version":3,"file":"Contact.25d5bfac.js.map"}